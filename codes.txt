treatment_plan_controller.py
-------------------------------
import os
import re
import json
import openai
from dotenv import load_dotenv
from openai import AsyncOpenAI
from models.patient import Patient
from datetime import date, timedelta
from models.reminder import Reminder
from typing import Any, Dict, List, Optional
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import func
from fastapi import status, Request, HTTPException
from controllers import staff_activity_log_controller
from models.patient_observation_model import PatientObservation
from models.institution.institution_services_model import InstitutionService
from schemas.staff_activity_log import StaffActionEnum, StaffActivityLogCreate
from schemas.treatment_plan_schemas import CarePlanGoalUpdate, TreatmentPlanUpdate, GoalReorderRequest, CarePlanGoalCreate 
from models.patient_treatment_plan_model import CarePlanGoal, TreatmentPlan, AssessmentChangeSummary
from models.assessment import PatientAssessment, AssessmentQuestion, PatientAssessmentScore, PatientAssessmentResponse

# --- Load and Configure AI ---
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY environment variable not set.")
client = AsyncOpenAI(api_key=OPENAI_API_KEY)


# =========================================================================
# === AI & DATA HELPER FUNCTIONS
# =========================================================================

def get_scores_for_assessment(db: Session, assessment_id: int) -> List[Dict[str, Any]]:
    """Fetches all scores for a given assessment session."""
    scores = db.query(PatientAssessmentScore).filter(PatientAssessmentScore.patient_assessment_id == assessment_id).all()
    return [{"domain": s.domain, "score": s.score, "interpretation": s.score_interpretation} for s in scores]

def get_recent_observations(db: Session, patient_id: int) -> Optional[PatientObservation]: # MODIFIED: return Optional[PatientObservation]
    """Fetches the most recent observation for a patient."""
    return db.query(PatientObservation).filter(PatientObservation.patient_id == patient_id).order_by(PatientObservation.observation_date.desc()).first() # MODIFIED: .first() instead of .limit(3).all() if only one is needed for status

def get_institution_services(db: Session, institution_id: int) -> List[Dict[str, Any]]:
    """Fetches all available services for an institution as a list of dictionaries."""
    services = db.query(InstitutionService).filter(InstitutionService.institution_id == institution_id).all()
    return [
        {
            "service_name": s.service_name,
            "frequency": s.frequency,
            "description": s.description
        }
        for s in services
    ]

def get_detailed_assessment_responses(db: Session, patient_assessment_id: int) -> List[Dict[str, Any]]:
    """
    Fetches all detailed responses for a given patient assessment,
    including question text, response value, and selected checklist options.
    """
    responses = db.query(PatientAssessmentResponse).options(
        joinedload(PatientAssessmentResponse.question)
    ).filter(PatientAssessmentResponse.patient_assessment_id == patient_assessment_id).all()

    formatted_responses = []
    for r in responses:
        response_data = {
            "question_code": r.question.question_code,
            "question_text": r.question.question_text,
            "domain": r.question.domain,
            "response_value": r.response_value,
            "response_type": r.question.response_type,
            "selected_checklist_options": r.selected_checklist_options if r.selected_checklist_options else []
        }
        formatted_responses.append(response_data)
    return formatted_responses

def extract_json_from_response(response_text: str) -> Dict[str, Any]:
    """Extracts JSON data from AI response text, cleaning up markdown if present."""
    try:
        return json.loads(response_text.strip())
    except json.JSONDecodeError:
        json_match = re.search(r'```(?:json)?\s*\n?({.*?})\s*```', response_text, re.DOTALL)
        if json_match:
            try:
                return json.loads(json_match.group(1))
            except json.JSONDecodeError as e:
                raise ValueError(f"Failed to decode JSON from markdown block: {e}")
        raise ValueError("Could not find or parse JSON in the AI response.")


def create_progress_analysis_prompt(previous_scores: List[Dict], current_scores: List[Dict]) -> str:
    """Creates the prompt to generate a progress analysis summary between two assessments."""
    previous_scores_text = "\n".join([f"- {s['domain']}: {s['score']} ({s['interpretation']})" for s in previous_scores])
    current_scores_text = "\n".join([f"- {s['domain']}: {s['score']} ({s['interpretation']})" for s in current_scores])
    prompt = f"""
    You are a clinical assessment analyst. Compare the following two assessments and provide a detailed analysis of changes.
    PREVIOUS ASSESSMENT SCORES:
    {previous_scores_text}
    CURRENT ASSESSMENT SCORES:
    {current_scores_text}
    Please analyze the changes and respond ONLY with a single valid JSON object containing:
    1. "changes_summary": A brief overall summary of the resident's progress.
    2. "domain_improvements": List of domains that improved (domain names only).
    3. "domain_no_change": List of domains that showed no significant change (domain names only).
    4. "domain_worsened": List of domains that worsened (domain names only).
    """
    return prompt

def create_detailed_progress_analysis_prompt(previous_scores: List[Dict], current_scores: List[Dict]) -> str:
    """
    Creates a prompt for a detailed, domain-by-domain progress analysis,
    including quantitative and qualitative feedback.
    """
    previous_scores_text = "\n".join([f"- {s['domain']}: {s['score']} ({s['interpretation']})" for s in previous_scores])
    current_scores_text = "\n".join([f"- {s['domain']}: {s['score']} ({s['interpretation']})" for s in current_scores])

    prompt = f"""
    You are an expert clinical data analyst specializing in longitudinal patient assessments.
    Your task is to compare two assessment results for the same resident and generate a detailed progress report.

    PREVIOUS ASSESSMENT SCORES:
    {previous_scores_text}

    CURRENT ASSESSMENT SCORES:
    {current_scores_text}

    **INSTRUCTIONS:**
    Your response MUST be a single, valid JSON object. The JSON object should have two top-level keys: "overall_summary" and "domain_analysis".

    1.  **overall_summary**: A concise, analytical paragraph summarizing the resident's overall trajectory (e.g., "The resident shows significant improvement in mobility and self-care, but social participation has declined. The overall trend is stable with targeted areas for improvement.").
    2.  **domain_analysis**: An array of objects, where each object represents one assessment domain and contains the following keys:
        - `domain_name`: The name of the domain (e.g., "Mobility").
        - `previous_score`: The numerical score from the previous assessment.
        - `current_score`: The numerical score from the current assessment.
        - `change_status`: A string: "Improved", "Worsened", or "No Significant Change".
        - `analysis`: A brief, one-sentence clinical analysis of the change. (e.g., "The resident's ability to get along with others has worsened, indicating potential challenges in group settings that may require intervention.").

    Provide a complete analysis for every domain present in the assessments.
    """
    return prompt

def create_structured_json_prompt(
    patient_details: dict,
    assessment_scores: list,
    observations: Optional[PatientObservation],
    services: list,
    progress_analysis: Optional[dict],
    detailed_responses: List[Dict[str, Any]]
) -> str:
    """
    Creates the most forceful and explicit prompt to ensure the AI returns a
    deeply nested and detailed JSON object for the structured care plan,
    adhering to specific operational guidelines.
    """
    assessment_scores_text = "\n".join([f"- {s['domain']}: {s['score']} ({s['interpretation']})" for s in assessment_scores])

    if observations:
        obs = observations
        observations_text = f"- {obs.observation_date.strftime('%Y-%m-%d')}: (Status: {obs.psychopathology_status}) {obs.observation_notes or 'N/A'}"
    else:
        observations_text = "No recent observations."

    services_text = "\n".join([f"- {s['service_name']}: (Frequency: {s['frequency'] or 'N/A'}) {s['description'] or ''}" for s in services]) if services else "No specific services listed."

    progress_text = ""
    if progress_analysis and progress_analysis.get("changes_summary"):
        progress_text = f'--- RECENT PROGRESS ANALYSIS (for context) ---\nSummary: {progress_analysis.get("changes_summary")}'

    patient_context_text = "\n".join([f"- {key.replace('_', ' ').title()}: {value}" for key, value in patient_details.items() if value is not None])

    detailed_responses_text = ""
    if detailed_responses:
        detailed_responses_text = "--- DETAILED ASSESSMENT RESPONSES (WHODAS 2.0, SOFS, WHOQoL-BREF) ---\n"
        for response in detailed_responses:
            question_text = response.get("question_text", "N/A")
            response_value = response.get("response_value", "N/A")
            domain = response.get("domain", "N/A")
            checklist_options = response.get("selected_checklist_options")

            detailed_responses_text += f"- Question (Domain: {domain}): \"{question_text}\"\n"
            detailed_responses_text += f"  Response: {response_value}\n"
            if checklist_options:
                try:
                    if isinstance(checklist_options, list):
                        options_str = ', '.join(checklist_options)
                    else:
                        parsed_list = json.loads(checklist_options)
                        options_str = ', '.join(parsed_list) if isinstance(parsed_list, list) else str(parsed_list)
                    detailed_responses_text += f"  Specific Impairments/Checklist: {options_str}\n"
                except (json.JSONDecodeError, TypeError):
                    detailed_responses_text += f"  Specific Impairments/Checklist: {checklist_options}\n"
            detailed_responses_text += "\n"

    context = f"""
    --- ORGANIZATION & RESIDENT PROFILE ---
    {patient_context_text}

    --- ASSESSMENT RESULTS & SCORES ---
    {assessment_scores_text}
    {detailed_responses_text}

    --- CLINICAL OBSERVATIONS & HEALTH STATUS ---
    {observations_text}

    --- AVAILABLE ORGANIZATIONAL RESOURCES & SERVICES ---
    {services_text}

    {progress_text}
    """

    prompt = f"""
    You are an AI Assistant for a mental health rehabilitation center in Kerala, specializing in providing care for homeless individuals with mental illness. Your task is to generate a comprehensive, personalized care plan based on the provided resident's data, assessment results, and the organization's available resources. Maintain a professional, empathetic, and clinically informed tone.

    Your ONLY function is to generate a single, valid JSON object. Your output MUST strictly follow all rules and the format described below.

    **--- TASK INSTRUCTIONS & RULES ---**

    **RULE 1: IDENTIFY AND PRIORITIZE NEEDS**
    Analyze all provided data to identify needs. You MUST prioritize needs in this specific order:
    1.  **Immediate Safety/Crisis**
    2.  **Psychiatric Stability**
    3.  **Fundamental Needs** (Self-Care, Mobility, Medication Adherence)
    4.  **Functional & Social Needs** (Life Activities, Social Participation, etc.)

    **RULE 2: CATEGORIZE NEEDS**
    You MUST categorize every identified need into one of the following domains: "Pharmacological", "Cognitive", "Mobility", "Self-Care", "Life Activities and Skills", "Social Life and Relationships", "Participation", "Other Needs". These will be the keys in the final `care_plan` object.

    **RULE 3: GOAL FORMULATION (OBJECTIVE-FOCUSED)**
    - For each need, you MUST draft a concise, high-level goal.
    - **Goal Phrasing Style:** The `goal` MUST be a single, short sentence starting with "To...". It should state the main clinical or functional objective.
    - **DO NOT** include measurement criteria (like frequency, duration, or specific actions) in the `goal` string. These details belong in the `intervention` field.
    - **CORRECT Goal Example:** "To improve social interaction skills and build positive relationships."
    - **INCORRECT Goal Example:** "To improve social skills by participating in one group session per week."

    **RULE 4: INTERVENTION FORMULATION (MEASURABLE ACTIONS)**
    - For each goal, you MUST propose a concrete, measurable intervention.
    - The `intervention` MUST describe the **specific actions, frequency, and duration** that will be performed to achieve the goal. This field serves as the measurable component of the S.M.A.R.T. goal.
    - **Intervention Phrasing Style:** You MUST use a template like: "Resident will [specific, measurable activity] with [relevant level of support] for [duration/frequency]."
    - **CORRECT Intervention Example:** "Resident will attend weekly gender-specific group sessions and practice communication skills with staff encouragement for the next 8 weeks."
    - Interventions MUST align with the services listed under `--- AVAILABLE ORGANIZATIONAL RESOURCES & SERVICES ---`.

    **RULE 5: RATIONALE**
    - For each intervention, you MUST provide a brief rationale explaining how it addresses the specific need.

    **RULE 6: JSON OUTPUT STRUCTURE**
    - The root of the JSON object MUST have these keys: "brief_background_summary", "disability_and_functioning_summary", "strengths_and_aspirations_summary", "risks_and_concerns", and "care_plan".
    - "risks_and_concerns" must be an array of strings.
    - The "care_plan" value MUST be an object where keys are the categories from RULE 2.
    - Each item within a category array must be an object with these exact keys: "identified_need", "goal", "intervention", and "rationale".

    --- EXAMPLE OF CORRECT OUTPUT STRUCTURE ---
    ```json
    {{
      "brief_background_summary": "...",
      "disability_and_functioning_summary": "...",
      "strengths_and_aspirations_summary": "...",
      "risks_and_concerns": ["History of medication non-adherence.", "Potential for conflict with peers."],
      "care_plan": {{
        "Pharmacological": [
          {{
            "identified_need": "Consistent adherence to prescribed psychiatric and diabetic medications.",
            "goal": "To achieve consistent adherence with prescribed medications to maintain psychiatric stability and physical health.",
            "intervention": "Resident will take all prescribed medications under direct supervision of nursing staff daily for the next 12 weeks.",
            "rationale": "Supervised administration addresses the history of non-adherence, a major risk factor for relapse, and helps stabilize both psychiatric and physical health."
          }}
        ],
        "Social Life and Relationships": [
          {{
            "identified_need": "Difficulty maintaining friendships and engaging with peers.",
            "goal": "To improve social interaction skills and build positive relationships with peers.",
            "intervention": "Resident will actively participate in at least one group session or social activity per week, with staff observation, for the next 8 weeks.",
            "rationale": "Regular group interaction provides a structured and supportive environment to practice social skills and address social withdrawal."
          }}
        ],
        "Mobility": []
      }}
    }}
    ```
    --- END OF EXAMPLE ---

    Now, generate the complete JSON object based on all rules, the example, and the following context. Do not output any text other than the single, valid JSON object.

    {context}
    """
    return prompt

# =========================================================================
# === CORE AI-POWERED CREATION FUNCTION
# =========================================================================


# controllers/treatment_plan_controller.py

async def generate_and_save_ai_plan(db: Session, patient_id: int, current_assessment_id: int, actor_staff_id: int, request: Request) -> Dict[str, Any]:
    """
    Orchestrates care plan generation using a nested structure, generates a detailed
    progress report, saves the plan, and creates a reminder.
    Returns a detailed dictionary of the created plan.
    """
    # Check if a plan for this specific assessment already exists to prevent duplicates
    if db.query(TreatmentPlan).filter(TreatmentPlan.patient_assessment_id == current_assessment_id).first():
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail=f"A treatment plan already exists for assessment ID {current_assessment_id}."
        )

    # --- Step 1: Generate DETAILED progress analysis by comparing to the previous assessment ---
    new_summary_id: Optional[int] = None
    progress_analysis_data: Optional[Dict[str, Any]] = None

    all_assessments = db.query(PatientAssessment).filter(
        PatientAssessment.patient_id == patient_id, PatientAssessment.status == 'completed'
    ).order_by(PatientAssessment.assessment_date.desc(), PatientAssessment.created_at.desc()).all()

    current_assessment_index = next((idx for idx, asmnt in enumerate(all_assessments) if asmnt.id == current_assessment_id), None)

    if current_assessment_index is not None and current_assessment_index < len(all_assessments) - 1:
        previous_assessment = all_assessments[current_assessment_index + 1]
        if previous_assessment:
            try:
                current_scores = get_scores_for_assessment(db, current_assessment_id)
                previous_scores = get_scores_for_assessment(db, previous_assessment.id)

                analysis_prompt = create_detailed_progress_analysis_prompt(previous_scores, current_scores)

                response = await client.chat.completions.create(
                    model="gpt-4.1",
                    messages=[
                        {"role": "system", "content": "You are a helpful assistant designed to output JSON."},
                        {"role": "user", "content": analysis_prompt}
                    ],
                    response_format={"type": "json_object"}
                )
                response_text = response.choices[0].message.content
                progress_analysis_data = extract_json_from_response(response_text)

                changes_summary_json = json.dumps(progress_analysis_data)

                db_summary = AssessmentChangeSummary(
                    patient_id=patient_id,
                    previous_assessment_id=previous_assessment.id,
                    current_assessment_id=current_assessment_id,
                    changes_summary=changes_summary_json,
                    created_by_staff_id=actor_staff_id,
                    generated_by_ai=True
                )
                db.add(db_summary)
                db.flush()
                new_summary_id = db_summary.id
            except Exception as e:
                db.rollback()
                print(f"WARNING: Could not generate detailed progress analysis. Reason: {e}. Proceeding without it.")

    # --- Step 2: Gather all context for the main care plan generation ---
    patient = db.query(Patient).filter(Patient.id == patient_id).first()
    if not patient:
        raise HTTPException(status_code=404, detail="Patient not found.")

    patient_details = {c.name: getattr(patient, c.name) for c in patient.__table__.columns if c.name not in ['id', 'name', 'institution_id', 'staff_id', 'created_at', 'updated_at']}
    current_scores_full = get_scores_for_assessment(db, current_assessment_id)
    observations = get_recent_observations(db, patient_id)
    services = get_institution_services(db, patient.institution_id)

    detailed_assessment_responses = get_detailed_assessment_responses(db, current_assessment_id)

    # --- Step 3: Call AI for the main care plan using the nested structure prompt ---
    plan_prompt = create_structured_json_prompt(
        patient_details,
        current_scores_full,
        observations,
        services,
        progress_analysis_data,
        detailed_assessment_responses
    )
    try:
        response = await client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": "You are a clinical care planning AI specialist designed to output a single, structured JSON object as instructed."},
                {"role": "user", "content": plan_prompt}
            ],
            response_format={"type": "json_object"},
            temperature=0.7
        )
        response_text = response.choices[0].message.content
        ai_plan_json = extract_json_from_response(response_text)

        care_plan_object = ai_plan_json.get("care_plan")
        if not isinstance(care_plan_object, dict):
            raise ValueError("AI response 'care_plan' key is not a valid object.")

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to generate structured care plan from OpenAI: {e}")

    # --- Step 4: Save the entire structured plan and its goals to the database ---
    try:
        latest_plan = db.query(TreatmentPlan).filter(TreatmentPlan.patient_id == patient_id).order_by(TreatmentPlan.version_number.desc()).first()
        new_version_number = (latest_plan.version_number + 1) if latest_plan else 1
        review_date = date.today() + timedelta(days=90)

        risks_data = ai_plan_json.get("risks_and_concerns")
        risks_string = "\n".join(f"- {item}" for item in risks_data) if isinstance(risks_data, list) else risks_data

        db_plan = TreatmentPlan(
            patient_id=patient_id,
            patient_assessment_id=current_assessment_id,
            assessment_change_summary_id=new_summary_id,
            created_by_staff_id=actor_staff_id,
            version_number=new_version_number,
            plan_start_date=date.today(),
            review_date=review_date,
            ai_model_version="gpt-4.1",
            status='active',
            brief_background_summary=ai_plan_json.get("brief_background_summary"),
            disability_and_functioning_summary=ai_plan_json.get("disability_and_functioning_summary"),
            strengths_and_aspirations_summary=ai_plan_json.get("strengths_and_aspirations_summary"),
            risks_and_concerns=risks_string,
        )
        db.add(db_plan)
        db.flush()

        display_order_counter = 0
        for category_name, needs_array in care_plan_object.items():
            if not isinstance(needs_array, list):
                continue

            for goal_data in needs_array:
                needs_text = goal_data.get('identified_need', 'N/A')

                db.add(CarePlanGoal(
                    treatment_plan_id=db_plan.id,
                    needs_category=needs_text,
                    goal=goal_data.get("goal"),
                    intervention=goal_data.get("intervention"),
                    rationale=goal_data.get("rationale"),
                    display_order=display_order_counter
                ))
                display_order_counter += 1

        review_reminder = Reminder(
            institution_id=patient.institution_id,
            patient_id=patient_id,
            staff_id=actor_staff_id,
            reminder_text=f"Care plan review due for resident (ID: {patient_id})",
            reminder_date=review_date,
            status='pending'
        )
        db.add(review_reminder)

        db.commit()
        db.refresh(db_plan)
        
        # ==========================================================
        # === THIS IS THE FIX ======================================
        # ==========================================================
        # Instead of returning the raw 'db_plan' object, we call
        # 'get_plan_details' to return a dictionary that matches
        # the expected response model, including 'patient_unique_id'.

        return get_plan_details(db=db, plan_id=db_plan.id)

    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to save care plan or reminder to database: {e}")

def create_care_plan_goal(db: Session, plan_id: int, goal_data: CarePlanGoalCreate, actor_staff_id: int, request: Request) -> CarePlanGoal:
    """Creates a new goal and adds it to an existing treatment plan."""
    db_plan = db.query(TreatmentPlan).filter(TreatmentPlan.id == plan_id).first()
    if not db_plan:
        raise HTTPException(status_code=404, detail=f"Treatment plan with ID {plan_id} not found.")

    # Determine the next display order to append the new goal to the end
    max_order = db.query(func.max(CarePlanGoal.display_order)).filter(CarePlanGoal.treatment_plan_id == plan_id).scalar()
    
    # Handle case where there are no goals yet (max_order will be None)
    next_order = (max_order + 1) if max_order is not None else 0

    db_goal = CarePlanGoal(
        **goal_data.model_dump(),
        treatment_plan_id=plan_id,
        display_order=next_order
    )
    db.add(db_goal)
    db.commit()
    db.refresh(db_goal)

    # Log the creation activity
    log_entry = StaffActivityLogCreate(
        staff_id=actor_staff_id,
        action=StaffActionEnum.create_record,
        table_name="care_plan_goals",
        details=f"Created new goal for treatment plan ID: {plan_id}",
        ip_address=request.client.host
    )
    staff_activity_log_controller.create_activity_log(db, log_data=log_entry)

    return db_goal

    
# =========================================================================
# === STANDARD CRUD & MANAGEMENT FUNCTIONS
# =========================================================================

def get_assessment_change_summary(db: Session, summary_id: int) -> AssessmentChangeSummary:
    """Retrieves a single assessment change summary with its related data."""
    summary = db.query(AssessmentChangeSummary).options(
        joinedload(AssessmentChangeSummary.patient),
        joinedload(AssessmentChangeSummary.previous_assessment).joinedload(PatientAssessment.assessment),
        joinedload(AssessmentChangeSummary.current_assessment).joinedload(PatientAssessment.assessment)
    ).filter(AssessmentChangeSummary.id == summary_id).first()
    if not summary:
        raise HTTPException(status_code=404, detail=f"Assessment change summary with ID {summary_id} not found.")
    return summary

def get_plans_for_patient(db: Session, patient_id: int) -> List[TreatmentPlan]:
    """Retrieves all plans for a patient, eagerly loading associated goals."""
    return db.query(TreatmentPlan).options(
        joinedload(TreatmentPlan.patient),
        joinedload(TreatmentPlan.patient_assessment).joinedload(PatientAssessment.assessment),
        joinedload(TreatmentPlan.goals)
    ).filter(TreatmentPlan.patient_id == patient_id).order_by(TreatmentPlan.version_number.asc()).all()


def get_plan_details(db: Session, plan_id: int) -> Dict[str, Any]:
    """
    Retrieves a single, complete treatment plan with its goals,
    and associated patient and assessment details.
    """
    plan = db.query(TreatmentPlan).options(
        joinedload(TreatmentPlan.patient),
        joinedload(TreatmentPlan.patient_assessment).joinedload(PatientAssessment.assessment),
        joinedload(TreatmentPlan.goals) # Eagerly load the goals relationship
    ).filter(TreatmentPlan.id == plan_id).first()

    if not plan:
        raise HTTPException(status_code=404, detail=f"Treatment plan with ID {plan_id} not found.")

    # Fetch all scores related to the current assessment
    scores = db.query(PatientAssessmentScore).filter(
        PatientAssessmentScore.patient_assessment_id == plan.patient_assessment_id
    ).all()

    # Fetch all responses related to the current assessment
    responses = db.query(PatientAssessmentResponse).options(
        joinedload(PatientAssessmentResponse.question)
    ).filter(PatientAssessmentResponse.patient_assessment_id == plan.patient_assessment_id).all()

    # Consolidate QoL scores from PatientAssessmentScores
    qol_scores_map = {s.domain: s.score for s in scores if "WHOQOL" in s.domain.upper() or "QUALITY OF LIFE" in s.domain.upper()}

    # Create SOFS impaired domains as a list of strings
    sofs_impaired_domains_list = []
    for r in responses:
        if r.question.question_code.startswith("SOFS_") and r.response_value and r.response_value != "1":
            item_text = r.question.question_text
            if r.selected_checklist_options:
                try:
                    # Handle both stringified JSON and direct list/dict
                    options = json.loads(r.selected_checklist_options) if isinstance(r.selected_checklist_options, str) else r.selected_checklist_options
                    if isinstance(options, list):
                        item_text += f": {', '.join(options)}"
                    else:
                        item_text += f": {options}"
                except (json.JSONDecodeError, TypeError):
                    item_text += f": {r.selected_checklist_options}"
            sofs_impaired_domains_list.append(item_text)

    # Calculate overall WHODAS score
    overall_whodas_score = next((s.score for s in scores if s.domain == "WHODAS 2.0 Overall Score"), None)
    
    # Calculate overall SOFS score
    overall_sofs_score = next((s.score for s in scores if "SOFS OVERALL" in s.domain.upper()), None)

    # Fetch latest psychopathology_status from PatientObservation
    latest_observation = db.query(PatientObservation).filter(PatientObservation.patient_id == plan.patient_id).order_by(PatientObservation.observation_date.desc()).first()
    
    return {
        "id": plan.id,
        "patient_id": plan.patient_id,
        "patient_name": plan.patient.name if plan.patient else "N/A",
        "patient_assessment_id": plan.patient_assessment_id,
        "assessment_name": plan.patient_assessment.assessment.assessment_name if plan.patient_assessment and plan.patient_assessment.assessment else "N/A",
        "assessment_change_summary_id": plan.assessment_change_summary_id,
        "created_at": plan.created_at.isoformat(),
        "updated_at": plan.updated_at.isoformat(),
        "plan_start_date": plan.plan_start_date.isoformat(),
        "review_date": plan.review_date.isoformat() if plan.review_date else None,
        "version_number": plan.version_number,
        "status": plan.status,
        
        # Summaries and Notes
        "brief_background_summary": plan.brief_background_summary,
        "disability_and_functioning_summary": plan.disability_and_functioning_summary,
        "strengths_and_aspirations_summary": plan.strengths_and_aspirations_summary,
        "risks_and_concerns": plan.risks_and_concerns,
        "additional_notes": plan.additional_notes,
        "care_plan_edit_summary": plan.care_plan_edit_summary,

        # Patient Details
        "patient_unique_id": str(plan.patient_id),
        "patient_age": plan.patient.age if plan.patient else None,
        "patient_gender": plan.patient.gender if plan.patient else None,
        "patient_date_of_admission": plan.patient.date_of_admission.isoformat() if plan.patient and plan.patient.date_of_admission else None,
        
        # Assessment Details
        "diagnosis": plan.patient.current_provisional_diagnosis if plan.patient else None,
        "psychopathology_status": latest_observation.psychopathology_status if latest_observation else None,
        "known_comorbidities": plan.patient.known_comorbidities if plan.patient else None,
        "assessment_date": plan.patient_assessment.assessment_date.isoformat() if plan.patient_assessment and plan.patient_assessment.assessment_date else None,

        # Calculated Scores
        "overall_whodas_score": overall_whodas_score,
        "overall_sofs_score": overall_sofs_score,
        "sofs_impaired_domains": sofs_impaired_domains_list,
        "overall_qol_score": qol_scores_map.get("WHOQoL Overall Quality of Life"),
        "overall_general_health_score": qol_scores_map.get("WHOQoL General Health"),
        "qol_physical_health_score": qol_scores_map.get("WHOQoL Physical Health"),
        "qol_physiological_score": qol_scores_map.get("WHOQoL Psychological"),
        "qol_social_relationships_score": qol_scores_map.get("WHOQoL Social Relationships"),
        "qol_environment_score": qol_scores_map.get("WHOQoL Environment"),
        
        # Full data lists for detailed views
        "scores": [{"domain": s.domain, "score": s.score, "score_interpretation": s.score_interpretation} for s in scores],
        "responses": [
            {
                "question_code": r.question.question_code,
                "question_text": r.question.question_text,
                "question_domain": r.question.domain,
                "response_value": r.response_value,
                "selected_checklist_options": json.loads(r.selected_checklist_options) if isinstance(r.selected_checklist_options, str) and r.selected_checklist_options else r.selected_checklist_options or []
            } for r in responses
        ],
        "goals": [
            {
                "id": goal.id,
                "treatment_plan_id": goal.treatment_plan_id,
                "needs_category": goal.needs_category,
                "goal": goal.goal,
                "intervention": goal.intervention,
                "rationale": goal.rationale,
                "display_order": goal.display_order
            }
            # Sort goals by their display_order to ensure consistent UI rendering
            for goal in sorted(plan.goals, key=lambda g: g.display_order)
        ],
    }
    
def get_plan_by_assessment(db: Session, assessment_id: int) -> Optional[Dict[str, Any]]:
    """
    Retrieves a plan associated with a specific assessment and formats it
    as a detailed dictionary.
    """
    # First, find the plan associated with the assessment ID
    plan = db.query(TreatmentPlan).filter(
        TreatmentPlan.patient_assessment_id == assessment_id
    ).first()

    # If no plan is found, return None
    if not plan:
        return None

    # If a plan is found, use the existing get_plan_details function to
    # build the correct, detailed dictionary structure.
    return get_plan_details(db, plan.id)

def update_treatment_plan(db: Session, plan_id: int, plan_update_data: TreatmentPlanUpdate, actor_staff_id: int, request: Request) -> TreatmentPlan:
    """Updates the main fields of a treatment plan (e.g., summaries, notes)."""
    # Retrieve the TreatmentPlan object directly for update operation
    db_plan_obj = db.query(TreatmentPlan).filter(TreatmentPlan.id == plan_id).first()
    if not db_plan_obj:
        raise HTTPException(status_code=404, detail=f"Treatment plan with ID {plan_id} not found.")


    update_data = plan_update_data.model_dump(exclude_unset=True)
    for key, value in update_data.items():
        if hasattr(db_plan_obj, key):
            setattr(db_plan_obj, key, value)

    db.commit()
    db.refresh(db_plan_obj)

    log_entry = StaffActivityLogCreate(
        staff_id=actor_staff_id, action=StaffActionEnum.update_record, table_name="treatment_plans",
        details=f"Updated treatment plan for resident ID: {db_plan_obj.patient_id} (Plan ID: {db_plan_obj.id})",
        ip_address=request.client.host
    )
    staff_activity_log_controller.create_activity_log(db, log_data=log_entry)

    return db_plan_obj


def update_treatment_plan(db: Session, plan_id: int, plan_update_data: TreatmentPlanUpdate, actor_staff_id: int, request: Request) -> Dict[str, Any]:
    """Updates the main fields of a treatment plan (e.g., summaries, notes)."""
    db_plan_obj = db.query(TreatmentPlan).filter(TreatmentPlan.id == plan_id).first()
    if not db_plan_obj:
        raise HTTPException(status_code=404, detail=f"Treatment plan with ID {plan_id} not found.")

    update_data = plan_update_data.model_dump(exclude_unset=True)
    for key, value in update_data.items():
        if hasattr(db_plan_obj, key):
            setattr(db_plan_obj, key, value)

    db.commit()
    # db.refresh is not needed here as we are fetching fresh data below

    log_entry = StaffActivityLogCreate(
        staff_id=actor_staff_id, action=StaffActionEnum.update_record, table_name="treatment_plans",
        details=f"Updated treatment plan for resident ID: {db_plan_obj.patient_id} (Plan ID: {db_plan_obj.id})",
        ip_address=request.client.host
    )
    staff_activity_log_controller.create_activity_log(db, log_data=log_entry)

    # *** FIX: ***
    # Instead of returning the raw SQLAlchemy object, call get_plan_details
    # to return the complete, correctly formatted dictionary that the frontend expects.
    return get_plan_details(db=db, plan_id=plan_id)

def delete_treatment_plan(db: Session, plan_id: int, actor_staff_id: int, request: Request) -> Dict[str, str]:
    """
    Deletes a treatment plan, its associated goals (via cascade), and its
    linked assessment change summary (if one exists).
    """
    db_plan = db.query(TreatmentPlan).filter(TreatmentPlan.id == plan_id).first()
    if not db_plan:
        raise HTTPException(status_code=404, detail=f"Treatment plan with ID {plan_id} not found.")

    try:
        # Delete the associated change summary if it exists
        if db_plan.assessment_change_summary_id:
            summary_to_delete = db.query(AssessmentChangeSummary).filter(
                AssessmentChangeSummary.id == db_plan.assessment_change_summary_id
            ).first()
            if summary_to_delete:
                db.delete(summary_to_delete)

        log_entry = StaffActivityLogCreate(
            staff_id=actor_staff_id, action=StaffActionEnum.delete_record, table_name="treatment_plans",
            details=f"Deleted treatment plan for resident ID: {db_plan.patient_id} (Plan ID: {plan_id})",
            ip_address=request.client.host
        )
        staff_activity_log_controller.create_activity_log(db, log_data=log_entry)

        # Deleting the plan will also delete its goals due to the cascade setting
        db.delete(db_plan)

        db.commit()

        return {"message": "Treatment plan and all associated data deleted successfully"}
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to delete treatment plan: {e}")
    

# In your treatment_plan_controller.py

def get_goal_status(db: Session, plan_id: int, goal_id: int):
    """Retrieves status data for a specific goal."""
    # Implement your logic to fetch status from database
    pass

def update_goal_status(db: Session, plan_id: int, goal_id: int, status_data: dict, actor_staff_id: int):
    """Updates status data for a specific goal."""
    # Implement your update logic
    pass

def get_all_goal_statuses(db: Session, plan_id: int) -> Dict[int, Dict]:
    """Retrieves status data for all goals in a plan."""
    # Implement logic to fetch all statuses
    pass

def delete_care_plan_goal(db: Session, goal_id: int, actor_staff_id: int, request: Request) -> Dict[str, str]:
    """Deletes a single goal from a care plan."""
    db_goal = db.query(CarePlanGoal).filter(CarePlanGoal.id == goal_id).first()
    if not db_goal:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"Care plan goal with ID {goal_id} not found.")

    # Log the activity before deleting
    log_entry = StaffActivityLogCreate(
        staff_id=actor_staff_id,
        action=StaffActionEnum.delete_record,
        table_name="care_plan_goals",
        details=f"Deleted goal (ID: {goal_id}) from treatment plan ID: {db_goal.treatment_plan_id}",
        ip_address=request.client.host
    )
    staff_activity_log_controller.create_activity_log(db, log_data=log_entry)

    db.delete(db_goal)
    db.commit()

    return {"message": "Goal deleted successfully"}

def reorder_care_plan_goals(db: Session, plan_id: int, reorder_data: GoalReorderRequest, actor_staff_id: int, request: Request):
    """Updates the display_order of all goals for a given treatment plan."""
    
    # Fetch the plan to ensure it exists
    db_plan = db.query(TreatmentPlan).filter(TreatmentPlan.id == plan_id).first()
    if not db_plan:
        raise HTTPException(status_code=404, detail=f"Treatment plan with ID {plan_id} not found.")

    # Fetch all current goals for this plan
    goals = db.query(CarePlanGoal).filter(CarePlanGoal.treatment_plan_id == plan_id).all()
    goal_map = {goal.id: goal for goal in goals}

    # Validate that the provided IDs match the existing goal IDs
    if set(goal_map.keys()) != set(reorder_data.goal_ids):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="The provided goal IDs do not match the goals in the treatment plan."
        )

    # Update the display_order based on the new order
    for index, goal_id in enumerate(reorder_data.goal_ids):
        if goal_id in goal_map:
            goal_map[goal_id].display_order = index

    db.commit()

    log_entry = StaffActivityLogCreate(
        staff_id=actor_staff_id, action=StaffActionEnum.update_record, table_name="care_plan_goals",
        details=f"Reordered goals for treatment plan ID: {plan_id}",
        ip_address=request.client.host
    )
    staff_activity_log_controller.create_activity_log(db, log_data=log_entry)

    return {"message": "Goals reordered successfully"}

# controllers/treatment_plan_controller.py

def update_care_plan_goal(db: Session, goal_id: int, goal_update_data: CarePlanGoalUpdate, actor_staff_id: int, request: Request) -> CarePlanGoal:
    """Updates a single goal within a care plan."""
    db_goal = db.query(CarePlanGoal).filter(CarePlanGoal.id == goal_id).first()
    if not db_goal:
        raise HTTPException(status_code=404, detail=f"Care plan goal with ID {goal_id} not found.")

    # Get the update data from the Pydantic model
    update_data = goal_update_data.model_dump(exclude_unset=True)
    
    # Update the goal object with the new data
    for key, value in update_data.items():
        if hasattr(db_goal, key):
            setattr(db_goal, key, value)

    db.commit()
    db.refresh(db_goal)

    # You can add activity logging here if needed

    return db_goal



CarePlanStatusSection.tsx
---------------------------------
import React, { useState } from 'react';
import { PencilIcon, ChevronDownIcon, ChevronUpIcon } from '../../icons';
interface StatusData {
  goal_progress?: string;
  barriers?: string[];
  comments?: string;
}

interface GoalStatus {
  [key: number]: StatusData;
}

interface CarePlanGoal {
  id: number;
  needs_category: string;
  goal: string | null;
}

interface CarePlanStatusSectionProps {
  goals: CarePlanGoal[];
  statusData: GoalStatus;
  onEditStatus: (goalId: number) => void;
  userRole?: string; // Optional: to control edit permissions
}

const progressOptions = [
  { value: 'Not Started', label: 'Not Started' },
  { value: 'In Progress', label: 'In Progress' },
  { value: 'Partially Achieved', label: 'Partially Achieved' },
  { value: 'Fully Achieved', label: 'Fully Achieved' },
  { value: 'Discontinued', label: 'Discontinued' },
];

const StatusIndicator: React.FC<{ status?: string }> = ({ status }) => {
  if (!status) return <span className="text-gray-400">Not specified</span>;

  const getStatusColor = () => {
    switch (status) {
      case 'Fully Achieved':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
      case 'Partially Achieved':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
      case 'In Progress':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
      case 'Not Started':
        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
      case 'Discontinued':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
    }
  };

  return (
    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor()}`}>
      {status}
    </span>
  );
};

const CarePlanStatusSection: React.FC<CarePlanStatusSectionProps> = ({
  goals,
  statusData,
  onEditStatus,
  userRole = 'staff', // Default to staff if not provided
}) => {
  const [expandedGoals, setExpandedGoals] = useState<Record<number, boolean>>({});

  const toggleGoalExpansion = (goalId: number) => {
    setExpandedGoals(prev => ({
      ...prev,
      [goalId]: !prev[goalId],
    }));
  };

  const canEdit = userRole === 'staff'; // Only staff can edit

  return (
    <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
      <div className="p-6 border-b border-gray-200 dark:border-gray-700">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
          Care Plan Status
        </h2>
        <p className="text-gray-600 dark:text-gray-400 text-sm mt-1">
          Track progress and updates for each treatment goal
        </p>
      </div>

      <div className="p-6">
        {goals.length === 0 ? (
          <div className="text-center py-6">
            <p className="text-gray-500 dark:text-gray-400">
              No goals have been added to this care plan yet.
            </p>
          </div>
        ) : (
          <div className="space-y-4">
            {goals.map(goal => {
              const goalStatus = statusData[goal.id] || {};
              const isExpanded = expandedGoals[goal.id];

              return (
                <div
                  key={goal.id}
                  className="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden"
                >
                  <div
                    className={`p-4 cursor-pointer ${isExpanded ? 'bg-gray-50 dark:bg-gray-700/50' : 'hover:bg-gray-50 dark:hover:bg-gray-700/30'}`}
                    onClick={() => toggleGoalExpansion(goal.id)}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className="flex-shrink-0">
                          {isExpanded ? (
                            <ChevronUpIcon className="h-5 w-5 text-gray-400" />
                          ) : (
                            <ChevronDownIcon className="h-5 w-5 text-gray-400" />
                          )}
                        </div>
                        <div>
                          <h3 className="text-sm font-semibold text-blue-700 dark:text-blue-300">
                            {goal.needs_category}
                          </h3>
                          <p className="text-sm text-gray-500 dark:text-gray-400 line-clamp-1">
                            {goal.goal || 'No goal description'}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <StatusIndicator status={goalStatus.goal_progress} />
                        {canEdit && (
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              onEditStatus(goal.id);
                            }}
                            className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
                            aria-label="Edit status"
                          >
                            <PencilIcon className="h-4 w-4" />
                          </button>
                        )}
                      </div>
                    </div>
                  </div>

                  {isExpanded && (
                    <div className="p-4 pt-0 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <h4 className="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-1">
                            Progress
                          </h4>
                          <p className="text-sm text-gray-800 dark:text-gray-200">
                            {goalStatus.goal_progress ? (
                              <StatusIndicator status={goalStatus.goal_progress} />
                            ) : (
                              <span className="text-gray-400">Not specified</span>
                            )}
                          </p>
                        </div>

                        <div>
                          <h4 className="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-1">
                            Barriers
                          </h4>
                          <div className="text-sm text-gray-800 dark:text-gray-200">
                            {goalStatus.barriers && goalStatus.barriers.length > 0 ? (
                              <ul className="list-disc list-inside space-y-1">
                                {goalStatus.barriers.map((barrier, idx) => (
                                  <li key={idx}>{barrier}</li>
                                ))}
                              </ul>
                            ) : (
                              <span className="text-gray-400">No barriers identified</span>
                            )}
                          </div>
                        </div>

                        <div className="md:col-span-2">
                          <h4 className="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-1">
                            Notes
                          </h4>
                          <div className="text-sm text-gray-800 dark:text-gray-200 bg-gray-50 dark:bg-gray-700/30 p-3 rounded">
                            {goalStatus.comments ? (
                              <p className="whitespace-pre-wrap">{goalStatus.comments}</p>
                            ) : (
                              <span className="text-gray-400">No additional notes</span>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
};

export default CarePlanStatusSection;


StatusModal.tsx
--------------------
// src/pages/patients/StatusModal.tsx
import React, { useState, useEffect } from "react";

interface StatusModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (data: {
    goal_progress: string;
    barriers: string[];
    comments: string;
  }) => void;
  initialData?: {
    goal_progress?: string;
    barriers?: string[];
    comments?: string;
  };
  goalTitle?: string;
}

export default function StatusModal({
  isOpen,
  onClose,
  onSave,
  initialData = {},
  goalTitle = "Goal"
}: StatusModalProps) {
  const [goalProgress, setGoalProgress] = useState(initialData.goal_progress || "");
  const [barriers, setBarriers] = useState(initialData.barriers?.join(", ") || "");
  const [comments, setComments] = useState(initialData.comments || "");

  useEffect(() => {
    if (initialData) {
      setGoalProgress(initialData.goal_progress || "");
      setBarriers(initialData.barriers?.join(", ") || "");
      setComments(initialData.comments || "");
    }
  }, [initialData]);

  if (!isOpen) return null;

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave({
      goal_progress: goalProgress,
      barriers: barriers.split(",").map(b => b.trim()).filter(Boolean),
      comments,
    });
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4">
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-md border border-gray-200 dark:border-gray-700">
        <div className="p-6 border-b border-gray-200 dark:border-gray-700">
          <h3 className="text-xl font-bold text-gray-900 dark:text-white">
            Update {goalTitle} Status
          </h3>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Progress
            </label>
            <select
              value={goalProgress}
              onChange={(e) => setGoalProgress(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:text-gray-200"
              required
            >
              <option value="">Select progress level</option>
              <option value="Not Started">Not Started</option>
              <option value="In Progress">In Progress</option>
              <option value="Partially Achieved">Partially Achieved</option>
              <option value="Fully Achieved">Fully Achieved</option>
              <option value="Discontinued">Discontinued</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Barriers (comma separated)
            </label>
            <input
              type="text"
              value={barriers}
              onChange={(e) => setBarriers(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:text-gray-200"
              placeholder="e.g. Lack of motivation, Transportation issues"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Comments
            </label>
            <textarea
              value={comments}
              onChange={(e) => setComments(e.target.value)}
              rows={3}
              className="w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:text-gray-200"
            />
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-white"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              Save Changes
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}


TreatmentPlanViewer.tsx
-------------------------
import React, { useState, useEffect, useCallback } from "react";
import { useParams, Link, useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import axios from "axios";
import { exportTreatmentPlanData } from "../../utilss/treatmentPlanExportUtils";
import CarePlanStatusSection from "./CarePlanStatusSection"; // Adjust path if needed

import {
  DndContext,
  closestCenter,
  PointerSensor,
  useSensor,
  useSensors,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  verticalListSortingStrategy,
  useSortable,
} from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";

// =================================================================
// 1. ICONS
// =================================================================

const DragHandleIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
    />
  </svg>
);
const ChevronLeftIcon = ({ className = "w-6 h-6" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M15.75 19.5L8.25 12l7.5-7.5"
    />
  </svg>
);
const DocumentTextIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z"
    />
  </svg>
);
const ExternalLinkIcon = ({ className = "w-4 h-4 ml-2" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-4.5 0V6.75A.75.75 0 0114.25 6h3.75m-3.75 0l4.5 4.5m-4.5-4.5L21 3"
    />
  </svg>
);
const PencilIcon = ({ className = "w-4 h-4" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14.25v4.5m-6.75-6.75h.008v.008H11.25v-.008z"
    />
  </svg>
);
const CalendarIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5"
    />
  </svg>
);
const TrashIcon = ({ className = "w-4 h-4" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.924a2.25 2.25 0 01-2.244-2.077L4.74 5.959M3.75 6.75h16.5M15.75 6.75V5.25A2.25 2.25 0 0013.5 3h-3a2.25 2.25 0 00-2.25 2.25v1.5h7.5z"
    />
  </svg>
);

const UserIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z"
    />
  </svg>
);

const ChartBarIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z"
    />
  </svg>
);

const HeartIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"
    />
  </svg>
);

const ShieldCheckIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M9 12.75L11.25 15 15 9.75m-3-7.036A11.959 11.959 0 013.598 6 11.99 11.99 0 003 9.749c0 5.592 3.824 10.29 9 11.623 5.176-1.332 9-6.03 9-11.623 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.285z"
    />
  </svg>
);

const ExclamationTriangleIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"
    />
  </svg>
);

const PlusIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M12 4.5v15m7.5-7.5h-15"
    />
  </svg>
);

// =================================================================
// 2. TYPE DEFINITIONS
// =================================================================

interface CarePlanGoal {
  id: number;
  treatment_plan_id: number;
  needs_category: string;
  goal: string | null;
  intervention: string | null;
  rationale: string | null;
}

interface TreatmentPlanDetail {
  id: number;
  patient_id: number;
  patient_name: string;
  patient_assessment_id: number;
  assessment_name: string;
  assessment_date: string;
  assessment_change_summary_id: number | null;
  created_at: string;
  plan_start_date: string;
  review_date: string | null;
  brief_background_summary: string | null;
  disability_and_functioning_summary: string | null;
  strengths_and_aspirations_summary: string | null;
  risks_and_concerns: string | null;
  additional_notes: string | null;
  care_plan_edit_summary: string | null;
  goals: CarePlanGoal[];
  // Include all the additional fields directly from the backend's get_plan_details response
  patient_unique_id: string;
  patient_age: number | null; // Can be null if not provided
  patient_gender: string | null; // Can be null if not provided
  patient_date_of_admission: string | null; // Can be null if not provided
  diagnosis: string | null;
  psychopathology_status: string | null;
  known_comorbidities: string | null;
  overall_whodas_score: number | null;
  overall_sofs_score: number | null;
  sofs_impaired_domains: string[]; // This is a list of strings now
  overall_qol_score: number | null;
  overall_general_health_score: number | null;
  qol_physical_health_score: number | null;
  qol_physiological_score: number | null;
  qol_social_relationships_score: number | null;
  qol_environment_score: number | null;
  scores: ScoreDetail[]; // Keep this to process detailed scores if needed
  responses: ResponseDetail[]; // Keep this to process detailed responses if needed
}

interface ResponseDetail {
  question_domain: string;
  question_text: string;
  response_value: string;
  question_code: string;
  selected_checklist_options: string[] | null;
}

interface ScoreDetail {
  domain: string;
  score: number;
  score_interpretation: string;
}

// =================================================================
// 3. SUB-COMPONENTS
// =================================================================
const SortableGoalRow = ({
  goal,
  index,
  onEditGoal,
  onDeleteGoal,
  userRole,
}) => {
  const { attributes, listeners, setNodeRef, transform, transition } =
    useSortable({ id: goal.id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  };

  return (
    <tr ref={setNodeRef} style={style}>
      {/* Drag Handle Column */}
      {userRole === "staff" && (
        <td className="px-3 py-6 whitespace-nowrap text-center">
          <button
            {...attributes}
            {...listeners}
            className="cursor-grab text-gray-400 hover:text-gray-700 dark:hover:text-gray-200"
            aria-label="Drag to reorder"
          >
            <DragHandleIcon />
          </button>
        </td>
      )}
      {/* Numbered and Prioritized Needs Column */}
      <td className="px-6 py-6 whitespace-normal">
        <div className="flex items-center gap-3">
          <span className="font-bold text-gray-700 dark:text-gray-300">
            {index + 1}.
          </span>
          <span className="text-sm font-semibold text-blue-700 dark:text-blue-300">
            {goal.needs_category}
          </span>
        </div>
      </td>
      {/* Other data columns */}
      <td className="px-6 py-6 whitespace-pre-wrap text-sm text-gray-800 dark:text-gray-200">
        {goal.goal}
      </td>
      <td className="px-6 py-6 whitespace-pre-wrap text-sm text-gray-800 dark:text-gray-200">
        {goal.intervention}
      </td>
      <td className="px-6 py-6 whitespace-pre-wrap text-sm text-gray-800 dark:text-gray-200">
        {goal.rationale}
      </td>
      {/* Actions Column */}
      {userRole === "staff" && (
        <td className="px-6 py-6 whitespace-nowrap text-right text-sm font-medium">
          <button
            onClick={() => onEditGoal(goal)}
            className="inline-flex items-center gap-1 text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 font-medium transition-colors"
          >
            <PencilIcon className="w-4 h-4" /> Edit
          </button>
          <button
            onClick={() => onDeleteGoal(goal)}
            className="ml-4 inline-flex items-center gap-1 text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300 font-medium transition-colors"
          >
            <TrashIcon className="w-4 h-4" /> Delete
          </button>
        </td>
      )}
    </tr>
  );
};

const GoalsSection = ({
  goals,
  onEditGoal,
  onDeleteGoal,
  onReorderSave,
  onAddGoal, // Prop to handle opening the add modal
  userRole,
}) => {
  const [orderedGoals, setOrderedGoals] = useState(goals);
  const [hasChanges, setHasChanges] = useState(false);

  useEffect(() => {
    setOrderedGoals(goals);
    setHasChanges(false);
  }, [goals]);

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 5,
      },
    })
  );

  const handleDragEnd = (event) => {
    const { active, over } = event;
    if (over && active.id !== over.id) {
      setOrderedGoals((items) => {
        const oldIndex = items.findIndex((item) => item.id === active.id);
        const newIndex = items.findIndex((item) => item.id === over.id);
        setHasChanges(true);
        return arrayMove(items, oldIndex, newIndex);
      });
    }
  };

  const handleSaveChanges = () => {
    onReorderSave(orderedGoals);
    setHasChanges(false);
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700">
      <div className="p-6 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 bg-purple-100 dark:bg-purple-900/30 rounded-xl flex items-center justify-center">
            <DocumentTextIcon />
          </div>
          <div>
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
              Treatment Goals
            </h2>
            <p className="text-gray-600 dark:text-gray-400 text-sm">
              Drag and drop goals to re-prioritize.
            </p>
          </div>
        </div>
        <div className="flex items-center gap-4">
          {hasChanges && userRole === "staff" && (
            <button
              onClick={handleSaveChanges}
              className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
            >
              Save New Order
            </button>
          )}
          {userRole === "staff" && (
            <button
              onClick={onAddGoal}
              className="inline-flex items-center gap-2 px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-lg hover:bg-green-700 transition-colors"
            >
              <PlusIcon className="w-4 h-4" />
              Add Goal
            </button>
          )}
        </div>
      </div>

      <div className="p-6">
        <div className="overflow-x-auto">
          <DndContext
            sensors={sensors}
            collisionDetection={closestCenter}
            onDragEnd={handleDragEnd}
          >
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead className="bg-gray-50 dark:bg-gray-700/50">
                <tr>
                  {userRole === "staff" && (
                    <th className="px-3 w-12" aria-label="Drag handle column"></th>
                  )}
                  <th className="px-6 py-4 text-left text-xs font-bold text-gray-500 dark:text-gray-300 uppercase tracking-wider">Identified Needs (Prioritized)</th>
                  <th className="px-6 py-4 text-left text-xs font-bold text-gray-500 dark:text-gray-300 uppercase tracking-wider">Goals</th>
                  <th className="px-6 py-4 text-left text-xs font-bold text-gray-500 dark:text-gray-300 uppercase tracking-wider">Intervention</th>
                  <th className="px-6 py-4 text-left text-xs font-bold text-gray-500 dark:text-gray-300 uppercase tracking-wider">Rationale</th>
                  {userRole === "staff" && (
                    <th className="px-6 py-4 text-right text-xs font-bold text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
                  )}
                </tr>
              </thead>
              <SortableContext
                items={orderedGoals.map((g) => g.id)}
                strategy={verticalListSortingStrategy}
              >
                <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                  {orderedGoals.length > 0 ? (
                    orderedGoals.map((goal, index) => (
                      <SortableGoalRow
                        key={goal.id}
                        goal={goal}
                        index={index}
                        onEditGoal={onEditGoal}
                        onDeleteGoal={onDeleteGoal}
                        userRole={userRole}
                      />
                    ))
                  ) : (
                    <tr>
                      <td colSpan={userRole === "staff" ? 6 : 4} className="px-6 py-12 text-center">
                        <div className="flex flex-col items-center">
                          <p className="text-gray-500 dark:text-gray-400 text-sm">No goals have been generated for this plan.</p>
                        </div>
                      </td>
                    </tr>
                  )}
                </tbody>
              </SortableContext>
            </table>
          </DndContext>
        </div>
      </div>
    </div>
  );
};

const GoalModal = ({ // Renamed from GoalEditModal
    goal, // Can be null for adding a new goal
    isOpen,
    onClose,
    onSave,
}: {
    goal: CarePlanGoal | null;
    isOpen: boolean;
    onClose: () => void;
    // The onSave prop now sends back a goal object that might not have an ID yet
    onSave: (goal: Omit<CarePlanGoal, 'id' | 'treatment_plan_id'>) => void;
}) => {
    const [formData, setFormData] = useState<Omit<CarePlanGoal, 'id' | 'treatment_plan_id'>>({
        needs_category: "",
        goal: "",
        intervention: "",
        rationale: "",
    });

    useEffect(() => {
        // If a goal is passed, we're in "edit" mode. Otherwise, "add" mode.
        if (goal) {
            setFormData({
                needs_category: goal.needs_category,
                goal: goal.goal || "",
                intervention: goal.intervention || "",
                rationale: goal.rationale || "",
            });
        } else {
            // Reset form for adding a new goal
            setFormData({
                needs_category: "",
                goal: "",
                intervention: "",
                rationale: "",
            });
        }
    }, [goal, isOpen]); // Rerun when isOpen changes to reset the form

    if (!isOpen) return null;

    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {
        const { name, value } = e.target;
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const handleSave = () => {
        if (formData) onSave(formData);
    };

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4">
            <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl w-full max-w-2xl border border-gray-200 dark:border-gray-700 flex flex-col max-h-[90vh]">
                <div className="p-6 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
                    <h3 className="text-xl font-bold text-gray-900 dark:text-white">
                        {/* Dynamic Title */}
                        {goal ? "Edit Goal" : "Add New Goal"}
                    </h3>
                </div>

                {/* The form fields remain the same, just ensure they use the new `formData` state */}
                <div className="p-6 space-y-6 overflow-y-auto">
                    <div>
                        <label className="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Identified Need</label>
                        <textarea name="needs_category" value={formData.needs_category} onChange={handleChange} rows={3} className="w-full p-3 border ..." placeholder="Enter the identified need category..." />
                    </div>
                    <div>
                        <label className="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Goal</label>
                        <textarea name="goal" value={formData.goal || ""} onChange={handleChange} rows={4} className="w-full p-3 border ..." placeholder="Enter the goal..." />
                    </div>
                    <div>
                        <label className="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Intervention</label>
                        <textarea name="intervention" value={formData.intervention || ""} onChange={handleChange} rows={4} className="w-full p-3 border ..." placeholder="Enter the intervention..." />
                    </div>
                    <div>
                        <label className="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Rationale</label>
                        <textarea name="rationale" value={formData.rationale || ""} onChange={handleChange} rows={4} className="w-full p-3 border ..." placeholder="Enter the rationale..." />
                    </div>
                </div>

                <div className="p-6 border-t border-gray-200 dark:border-gray-700 flex justify-end space-x-3 flex-shrink-0">
                    <button onClick={onClose} className="px-6 py-2 ...">Cancel</button>
                    <button onClick={handleSave} className="px-6 py-2 ...">Save Changes</button>
                </div>
            </div>
        </div>
    );
};

// =================================================================
// 4. MAIN COMPONENT
// =================================================================

export default function TreatmentPlanViewer(): React.JSX.Element {
  const { planId } = useParams<{ planId: string }>();
  const navigate = useNavigate();

  const [plan, setPlan] = useState<TreatmentPlanDetail | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [editingField, setEditingField] = useState<string | null>(null);
  const [tempContent, setTempContent] = useState("");
  const [editingGoal, setEditingGoal] = useState<CarePlanGoal | null>(null);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [deletingGoal, setDeletingGoal] = useState<CarePlanGoal | null>(null);
  const [isAddGoalModalOpen, setIsAddGoalModalOpen] = useState(false);
  const [editSummary, setEditSummary] = useState("");
  const [statusData, setStatusData] = useState({});
  const [isStatusModalOpen, setIsStatusModalOpen] = useState(false);
  const [selectedGoalId, setSelectedGoalId] = useState<number | null>(null);

  const userRole = localStorage.getItem("user_role");

  const fetchAllDetails = useCallback(async () => {
    if (!planId) {
      setError("Treatment Plan ID is missing.");
      setIsLoading(false);
      return;
    }
    setIsLoading(true);
    try {
      const token = localStorage.getItem("token");
      const headers = { Authorization: `Bearer ${token}` };

      const planResponse = await axios.get<TreatmentPlanDetail>(
        `${import.meta.env.VITE_API_URL}/treatment-plans/${planId}`,
        { headers }
      );
      setPlan(planResponse.data);
      setEditSummary(planResponse.data.care_plan_edit_summary || "");
      const statusRes = await axios.get(`/treatment-plans/${planId}/status`, { headers });
      setStatusData(statusRes.data);

    } catch (err: any) {
      setError(err.response?.data?.detail || "Failed to fetch details.");
    } finally {
      setIsLoading(false);
    }
  }, [planId]);

  useEffect(() => {
    fetchAllDetails();
  }, [fetchAllDetails]);

  const handleEditClick = (
    fieldName: string,
    currentContent: string | null
  ) => {
    setEditingField(fieldName);
    if (fieldName === "review_date" && currentContent) {
      setTempContent(new Date(currentContent).toISOString().split("T")[0]);
    } else {
      setTempContent(currentContent || "");
    }
  };

  const handleCancelEdit = () => {
    setEditingField(null);
    setTempContent("");
  };

  const handleSave = async () => {
    if (!plan || !editingField) return;

    toast.info("Saving changes...");
    try {
      const token = localStorage.getItem("token");
      const headers = { Authorization: `Bearer ${token}` };
      await axios.put(
        `${import.meta.env.VITE_API_URL}/treatment-plans/${plan.id}`,
        { [editingField]: tempContent },
        { headers }
      );

      await fetchAllDetails();
      toast.success("Plan updated successfully!");
    } catch (err: any) {
      toast.error(err.response?.data?.detail || "Failed to update plan.");
    } finally {
      setEditingField(null);
      setTempContent("");
    }
  };

  const handleSaveGoal = async (updatedGoal: CarePlanGoal) => {
    toast.info("Saving goal...");
    try {
      const token = localStorage.getItem("token");
      const headers = { Authorization: `Bearer ${token}` };
      await axios.put(
        `${import.meta.env.VITE_API_URL}/treatment-plans/goals/${
          updatedGoal.id
        }`,
        updatedGoal,
        { headers }
      );

      setPlan((prev) =>
        prev
          ? {
              ...prev,
              goals: prev.goals.map((g) =>
                g.id === updatedGoal.id ? updatedGoal : g
              ),
            }
          : null
      );
      setEditingGoal(null);
      toast.success("Goal updated successfully!");
    } catch (err: any) {
      toast.error(err.response?.data?.detail || "Failed to update goal.");
    }
  };
  
  const handleSaveNewGoal = async (newGoalData: Omit<CarePlanGoal, 'id' | 'treatment_plan_id'>) => {
    if (!plan) return;
    toast.info("Adding new goal...");
    try {
        const token = localStorage.getItem("token");
        const headers = { Authorization: `Bearer ${token}` };
        const response = await axios.post<CarePlanGoal>(
            `${import.meta.env.VITE_API_URL}/treatment-plans/${plan.id}/goals`,
            newGoalData,
            { headers }
        );

        const newlyAddedGoal = response.data;

        setPlan(prev => prev ? { ...prev, goals: [...prev.goals, newlyAddedGoal] } : null);
        
        setIsAddGoalModalOpen(false);
        toast.success("Goal added successfully!");
    } catch (err: any) {
        toast.error(err.response?.data?.detail || "Failed to add goal.");
    }
  };

  const handleSaveEditSummary = async () => {
    if (!plan) return;
    toast.info("Saving edit summary...");
    try {
      const token = localStorage.getItem("token");
      const headers = { Authorization: `Bearer ${token}` };
      await axios.put(
        `${import.meta.env.VITE_API_URL}/treatment-plans/${plan.id}`,
        { care_plan_edit_summary: editSummary },
        { headers }
      );
      toast.success("Edit summary saved!");
      setPlan(prev => prev ? { ...prev, care_plan_edit_summary: editSummary } : null);
    } catch (err: any) {
        toast.error(err.response?.data?.detail || "Failed to save summary.");
    }
  };


const handleExport = () => {
  if (!plan) return;
  exportTreatmentPlanData(plan, { format: "pdf" }); // or "excel" for Excel format
};

  const handleDeletePlan = async () => {
    setIsDeleteModalOpen(false);
    if (!plan) return;

    toast.info("Deleting care plan...");
    try {
      const token = localStorage.getItem("token");
      const headers = { Authorization: `Bearer ${token}` };
      await axios.delete(
        `${import.meta.env.VITE_API_URL}/treatment-plans/${plan.id}`,
        { headers }
      );

      toast.success("Care plan deleted successfully.");

      const patientProfileBasePath =
        userRole === "admin"
          ? "/admin/patients/view"
          : userRole === "institution"
          ? "/institution/patients/view"
          : "/staff/patients/view";

      let backPath = `${patientProfileBasePath}/${plan?.patient_id}`;

      if (!plan?.patient_id) {
        if (userRole === "admin") {
          backPath = `/admin/patients/all-patients`;
        } else if (userRole === "institution") {
          backPath = `/institution/patients/all-patients`;
        } else {
          backPath = `/staff/patients/all-patients`;
        }
        toast.warn(
          "Could not determine patient profile; navigating to all patients list."
        );
      }

      navigate(backPath);
    } catch (err: any) {
      toast.error(err.response?.data?.detail || "Failed to delete care plan.");
    }
  };

  const handleConfirmDeleteGoal = async () => {
    if (!deletingGoal) return;

    toast.info("Deleting goal...");
    try {
      const token = localStorage.getItem("token");
      const headers = { Authorization: `Bearer ${token}` };
      await axios.delete(
        `${import.meta.env.VITE_API_URL}/treatment-plans/goals/${
          deletingGoal.id
        }`,
        { headers }
      );

      setPlan((prevPlan) => {
        if (!prevPlan) return null;
        return {
          ...prevPlan,
          goals: prevPlan.goals.filter((g) => g.id !== deletingGoal.id),
        };
      });

      toast.success("Goal deleted successfully!");
    } catch (err: any) {
      toast.error(err.response?.data?.detail || "Failed to delete goal.");
    } finally {
      setDeletingGoal(null);
    }
  };
  
  const handleReorderSave = async (reorderedGoals: CarePlanGoal[]) => {
    if (!plan) return;
    
    const orderedIds = reorderedGoals.map(g => g.id);

    toast.info("Saving new goal order...");
    try {
        const token = localStorage.getItem("token");
        await axios.put(
            `${import.meta.env.VITE_API_URL}/treatment-plans/${plan.id}/goals/reorder`,
            { goal_ids: orderedIds },
            { headers: { Authorization: `Bearer ${token}` } }
        );
        
        setPlan(prevPlan => prevPlan ? ({
            ...prevPlan,
            goals: reorderedGoals,
        }) : null);
        
        toast.success("Goal order updated successfully!");
    } catch (err: any) {
        toast.error(err.response?.data?.detail || "Failed to save new order.");
        fetchAllDetails();
    }
  };

  const formatDate = (dateString: string | null) => {
    if (!dateString) return "N/A";
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
      return "Invalid Date";
    }
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const renderContent = (
    content: string | number | null | undefined
  ): string | React.JSX.Element => {
    if (content === null || content === undefined) {
      return <span className="italic text-gray-400">Not provided.</span>;
    }

    const stringContent = String(content).trim();

    if (stringContent === "") {
      return <span className="italic text-gray-400">Not provided.</span>;
    }

    return stringContent;
  };

  const renderSofsImpairedDomains = (responses: ResponseDetail[]) => {
    if (!responses || !Array.isArray(responses) || responses.length === 0) {
      return (
        <ul className="list-disc list-inside space-y-2 text-sm text-gray-800 dark:text-gray-200">
          <li className="italic text-gray-400">
            No significant impairments identified in SOFS.
          </li>
        </ul>
      );
    }
  
    const impairedDomains: { [key: string]: string[] } = {};
  
    responses.forEach((res) => {
      if (
        res.question_code.startsWith("SOFS_") &&
        res.response_value &&
        res.response_value !== "1"
      ) {
        const impairmentLevel = (() => {
          switch (res.response_value) {
            case "2":
              return "Mild impairment";
            case "3":
              return "Moderate impairment";
            case "4":
              return "Severe impairment";
            case "5":
              return "Extreme impairment";
            default:
              return "Other impairment";
          }
        })();
  
        if (!impairedDomains[impairmentLevel]) {
          impairedDomains[impairmentLevel] = [];
        }
  
        let domainName = res.question_text;
        let itemContent = "";
  
        if (res.question_text.includes(":")) {
          const parts = res.question_text.split(":", 2);
          domainName = parts[0].trim();
          itemContent = parts[1].trim();
        } else {
          itemContent = domainName;
        }
  
        if (domainName.endsWith(".")) {
          domainName = domainName.slice(0, -1);
        }
  
        if (
          res.selected_checklist_options &&
          res.selected_checklist_options.length > 0
        ) {
          itemContent += `: ${res.selected_checklist_options.join(", ")}`;
        }
  
        impairedDomains[impairmentLevel].push(
          `<strong>${domainName}:</strong> ${itemContent}`
        );
      }
    });
  
    const sortedLevels = [
      "Extreme impairment",
      "Severe impairment",
      "Moderate impairment",
      "Mild impairment",
      "Other impairment",
    ];
  
    const hasImpairments = Object.keys(impairedDomains).length > 0;
  
    return (
      <ul className="list-disc list-inside space-y-2 text-sm text-gray-800 dark:text-gray-200">
        {hasImpairments ? (
          sortedLevels.map((level) => {
            const items = impairedDomains[level];
            if (items && items.length > 0) {
              return (
                <li
                  key={level}
                  className="font-semibold text-blue-700 dark:text-blue-300"
                >
                  {level}:
                  <ul className="list-circle list-inside ml-4 text-gray-700 dark:text-gray-300 font-normal">
                    {items.map((item, idx) => (
                      <li key={idx} dangerouslySetInnerHTML={{ __html: item }} />
                    ))}
                  </ul>
                </li>
              );
            }
            return null;
          })
        ) : (
          <li className="italic text-gray-400">
            No significant impairments identified in SOFS.
          </li>
        )}
      </ul>
    );
  };

  if (isLoading)
    return (
      <div className="p-8 text-center text-lg text-gray-600 dark:text-gray-300">
        Loading Care Plan...
      </div>
    );
  if (error)
    return (
      <div className="p-8 text-center text-red-600 dark:text-red-400 text-lg">
        Error: {error}
      </div>
    );
  if (!plan)
    return (
      <div className="p-8 text-center text-gray-600 dark:text-gray-300 text-lg">
        No treatment plan found.
      </div>
    );

  const assessmentResponseBasePath =
    userRole === "admin"
      ? "/admin/patients/assessment-response"
      : userRole === "institution"
      ? "/institution/patients/assessment-response"
      : "/staff/patients/assessment-response";

  const backToAssessmentLink = `${assessmentResponseBasePath}/${plan.patient_assessment_id}`;

  const progressReportBasePath =
    userRole === "admin"
      ? "/admin/patients/progress-report"
      : userRole === "institution"
      ? "/institution/patients/progress-report"
      : "/staff/patients/progress-report";

  const progressReportLink = plan.assessment_change_summary_id
    ? `${progressReportBasePath}/${plan.assessment_change_summary_id}`
    : null;

  const profileData = [
    {
      title: "Brief Background Summary",
      content: plan.brief_background_summary,
      fieldName: "brief_background_summary",
    },
    {
      title: "Disability and Functioning Summary",
      content: plan.disability_and_functioning_summary,
      fieldName: "disability_and_functioning_summary",
    },
    {
      title: "Strengths and Aspirations",
      content: plan.strengths_and_aspirations_summary,
      fieldName: "strengths_and_aspirations_summary",
    },
    {
      title: "Risks and Concerns",
      content: plan.risks_and_concerns,
      fieldName: "risks_and_concerns",
    },
    {
      title: "Additional Staff Notes",
      content: plan.additional_notes,
      fieldName: "additional_notes",
    },
  ];

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="p-4 sm:p-6 md:p-8">
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <div className="flex justify-between items-center mb-6">
              <Link
                to={backToAssessmentLink}
                className="inline-flex items-center text-sm font-medium text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 group transition-colors"
              >
                <ChevronLeftIcon className="h-4 w-4 mr-2 group-hover:translate-x-[-2px] transition-transform" />{" "}
                Back to Assessment
              </Link>
               <div className="flex items-center gap-4">
    <button
      onClick={handleExport}
      className="inline-flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-lg hover:bg-indigo-700 transition-colors"
    >
      <svg className="w-4 h-4" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
      </svg>
      Export Plan
    </button>
              {userRole === "staff" && (
                <button
                  onClick={() => setIsDeleteModalOpen(true)}
                  className="inline-flex items-center gap-2 px-4 py-2 bg-red-100 text-red-700 dark:bg-red-900/40 dark:text-red-300 text-sm font-medium rounded-lg hover:bg-red-200 dark:hover:bg-red-900/60 transition-colors"
                >
                  <TrashIcon className="w-4 h-4" /> Delete Plan
                </button>
              )}
            </div>
</div>
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6">
              <h1 className="text-4xl font-extrabold text-gray-900 dark:text-white mb-2">
                Care Plan
              </h1>
              <p className="mt-1 text-xl font-medium text-gray-700 dark:text-gray-300">
                For: <span className="font-bold">{plan.patient_name}</span>
              </p>
              <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700 flex flex-wrap gap-x-8 gap-y-3 text-base">
                <span className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
                  <CalendarIcon className="w-5 h-5" />
                  Generated:{" "}
                  <strong className="text-gray-800 dark:text-gray-200">
                    {formatDate(plan.created_at)}
                  </strong>
                </span>
                <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
                  <CalendarIcon className="w-5 h-5" />
                  <span>Review Date:</span>
                  {editingField === "review_date" ? (
                    <div className="flex items-center gap-2">
                      <input
                        type="date"
                        value={tempContent}
                        onChange={(e) => setTempContent(e.target.value)}
                        className="p-1 border border-gray-300 rounded-md dark:bg-gray-700 dark:text-gray-200 text-sm focus:ring-blue-500 focus:border-blue-500"
                      />
                      <button
                        onClick={handleSave}
                        className="px-3 py-1 bg-blue-600 text-white text-xs rounded-md hover:bg-blue-700 transition-colors"
                      >
                        Save
                      </button>
                      <button
                        onClick={handleCancelEdit}
                        className="px-3 py-1 bg-gray-200 text-gray-800 text-xs rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500 transition-colors"
                      >
                        Cancel
                      </button>
                    </div>
                  ) : (
                    <strong className="text-gray-800 dark:text-gray-200 flex items-center gap-1">
                      {formatDate(plan.review_date)}
                      {userRole === "staff" && (
                        <button
                          onClick={() =>
                            handleEditClick("review_date", plan.review_date)
                          }
                          className="ml-1 text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 transition-colors"
                        >
                          <PencilIcon className="w-3 h-3" />
                        </button>
                      )}
                    </strong>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Resident Demographic and Assessment Overview */}
          {plan && (
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 mb-8">
              <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">
                Resident and Assessment Overview
              </h2>
              <div className="overflow-x-auto">
                <table className="min-w-full border-collapse">
                  <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Unique ID
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.patient_unique_id)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Name
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.patient_name)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Age
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.patient_age)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Gender
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.patient_gender)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Date of Admission
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {formatDate(plan.patient_date_of_admission)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Date of Assessment
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {formatDate(plan.assessment_date)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Current/Provisional Diagnosis
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.diagnosis)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Psychopathology Status
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.psychopathology_status)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Known Comorbidities
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.known_comorbidities)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        WHODAS 2.0 Overall Score
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.overall_whodas_score)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 align-top text-sm font-bold text-gray-600 dark:text-gray-300">
                        WHODAS 2.0 Domain Scores
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {plan.scores &&
                        plan.scores.filter((s) =>
                          s.domain.startsWith("WHODAS Domain")
                        ).length > 0 ? (
                          <ul className="list-disc list-inside">
                            {plan.scores
                              .filter((s) =>
                                s.domain.startsWith("WHODAS Domain")
                              )
                              .map((score, idx) => {
                                return (
                                  <li key={idx}>
                                    {score.domain.replace("WHODAS ", "")}:{" "}
                                    <span className="font-semibold">
                                      {renderContent(score.score)}
                                    </span>
                                  </li>
                                );
                              })}
                          </ul>
                        ) : (
                          <span className="italic text-gray-400">N/A</span>
                        )}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        SOFS Overall Score
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.overall_sofs_score)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 align-top text-sm font-bold text-gray-600 dark:text-gray-300">
                        SOFS Impaired Domains
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderSofsImpairedDomains(plan.responses)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Quality of Life Overall QoL
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.overall_qol_score)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Quality of Life Overall General Health
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.overall_general_health_score)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 align-top text-sm font-bold text-gray-600 dark:text-gray-300">
                        Quality of Life Sub-scores
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {plan.qol_physical_health_score !== null ||
                        plan.qol_physiological_score !== null ||
                        plan.qol_social_relationships_score !== null ||
                        plan.qol_environment_score !== null ? (
                          <ul className="list-disc list-inside">
                            <li>
                              Physical Health:{" "}
                              {renderContent(plan.qol_physical_health_score)}
                            </li>
                            <li>
                              Physiological:{" "}
                              {renderContent(plan.qol_physiological_score)}
                            </li>
                            <li>
                              Social Relationships:{" "}
                              {renderContent(
                                plan.qol_social_relationships_score
                              )}
                            </li>
                            <li>
                              Environment:{" "}
                              {renderContent(plan.qol_environment_score)}
                            </li>
                          </ul>
                        ) : (
                          <span className="italic text-gray-400">N/A</span>
                        )}
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {/* Basic Resident Profile Table */}
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">
              Basic Resident Profile
            </h2>
            <div className="overflow-x-auto">
              <table className="min-w-full border-collapse">
                <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                  {profileData.map(({ title, content, fieldName }) => (
                    <tr
                      key={fieldName}
                      className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors"
                    >
                      <td className="px-6 py-4 w-1/3 align-top text-sm font-bold text-gray-600 dark:text-gray-300">
                        {title}
                      </td>
                      <td className="px-6 py-4 align-top">
                        {editingField === fieldName ? (
                          <div>
                            <textarea
                              value={tempContent}
                              onChange={(e) => setTempContent(e.target.value)}
                              className="w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:text-gray-200 focus:ring-blue-500 focus:border-blue-500"
                              rows={5}
                            />
                            <div className="flex gap-2 mt-2">
                              <button
                                onClick={handleSave}
                                className="px-3 py-1 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 transition-colors"
                              >
                                Save
                              </button>
                              <button
                                onClick={handleCancelEdit}
                                className="px-3 py-1 bg-gray-200 text-gray-800 text-sm rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-white transition-colors"
                              >
                                Cancel
                              </button>
                            </div>
                          </div>
                        ) : (
                          <div className="flex justify-between items-start">
                            {content ? (
                              <ul className="list-disc list-inside text-sm text-gray-800 dark:text-gray-200 space-y-1">
                                {content.split("\n").map((line, idx) => (
                                  <li key={idx}>{line.trim()}</li>
                                ))}
                              </ul>
                            ) : (
                              <p className="text-sm italic text-gray-400">
                                Not provided.
                              </p>
                            )}
                            {userRole === "staff" && (
                              <button
                                onClick={() =>
                                  handleEditClick(fieldName, content)
                                }
                                className="ml-4 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-sm flex-shrink-0 transition-colors"
                              >
                                Edit
                              </button>
                            )}
                          </div>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Goals Table */}
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 mb-8">
            <GoalsSection
              goals={plan.goals}
              onEditGoal={(goal) => setEditingGoal(goal)}
              onDeleteGoal={(goal) => setDeletingGoal(goal)}
              onReorderSave={handleReorderSave}
              onAddGoal={() => setIsAddGoalModalOpen(true)}
              userRole={userRole}
            />
            <CarePlanStatusSection
              goals={plan.goals}
              statusData={statusData}
              onEditStatus={(goalId) => {
                setSelectedGoalId(goalId);
                setIsStatusModalOpen(true);
              }}
            />
          </div>

          {/* Care Plan Edit Summary Section */}
          {userRole === 'staff' && (
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 mb-8">
              <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
                Care Plan Edit Summary
              </h2>
              <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                Note any manual changes, discussions, or reasons for editing this care plan. This summary is for internal records.
              </p>
              <textarea
                  value={editSummary}
                  onChange={(e) => setEditSummary(e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg dark:bg-gray-700 dark:text-gray-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-y"
                  rows={6}
                  placeholder="e.g., 'Increased goal priority for social skills based on discussion with Dr. Smith. Resident agreed to the new focus.'"
              />
              <div className="mt-4 flex justify-end">
                <button
                  onClick={handleSaveEditSummary}
                  className="px-6 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Save Summary
                </button>
              </div>
            </div>
          )}

          {/* Links */}
          {progressReportLink && (
            <div className="mt-8">
              <Link
                to={progressReportLink}
                className="inline-flex items-center px-4 py-2 border border-blue-200 rounded-lg text-sm font-medium text-blue-700 bg-blue-100 hover:bg-blue-200 dark:bg-blue-900/50 dark:text-blue-200 dark:border-blue-700 hover:dark:bg-blue-900/70 transition-colors"
              >
                View Associated Progress Report <ExternalLinkIcon />
              </Link>
            </div>
          )}
        </div>
      </div>

      {/* MODAL: Delete Confirmation */}
      {isDeleteModalOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4">
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-6 w-full max-w-md border border-gray-200 dark:border-gray-700">
            <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-3">
              Confirm Deletion
            </h3>
            <p className="mt-2 text-sm text-gray-600 dark:text-gray-300">
              Are you sure you want to delete this care plan? This will also
              delete any associated progress reports. This action cannot be
              undone.
            </p>
            <div className="mt-6 flex justify-end gap-3">
              <button
                onClick={() => setIsDeleteModalOpen(false)}
                className="px-4 py-2 text-sm font-medium rounded-lg bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleDeletePlan}
                className="px-4 py-2 text-sm font-medium rounded-lg bg-red-600 text-white hover:bg-red-700 transition-colors"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}

      {/* MODAL: Goal Deletion Confirmation */}
      {deletingGoal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4">
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-6 w-full max-w-md border border-gray-200 dark:border-gray-700">
            <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-3">
              Confirm Goal Deletion
            </h3>
            <p className="mt-2 text-sm text-gray-600 dark:text-gray-300">
              Are you sure you want to delete this goal? This action cannot be
              undone.
              <strong className="block mt-2 text-gray-800 dark:text-gray-100 italic">
                "{deletingGoal.needs_category}"
              </strong>
            </p>
            <div className="mt-6 flex justify-end gap-3">
              <button
                onClick={() => setDeletingGoal(null)}
                className="px-4 py-2 text-sm font-medium rounded-lg bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleConfirmDeleteGoal}
                className="px-4 py-2 text-sm font-medium rounded-lg bg-red-600 text-white hover:bg-red-700 transition-colors"
              >
                Delete Goal
              </button>
            </div>
          </div>
        </div>
      )}

      {/* MODAL: Goal Edit / Add */}
      <GoalModal
        isOpen={!!editingGoal || isAddGoalModalOpen}
        goal={editingGoal}
        onClose={() => {
          setEditingGoal(null);
          setIsAddGoalModalOpen(false);
        }}
        onSave={(goalData) => {
            if (editingGoal) {
                handleSaveGoal({ ...editingGoal, ...goalData });
            } else {
                handleSaveNewGoal(goalData);
            }
        }}
      />
    </div>
  );
}



treatment_plan_routes.py
-----------------------------
from fastapi import APIRouter, Depends, HTTPException, status, Request
from sqlalchemy.orm import Session
from typing import List, Optional

# --- Controller and DB Imports ---
from controllers import treatment_plan_controller
from database.database import get_db

# --- Updated Schema Imports ---
from schemas.treatment_plan_schemas import (
    TreatmentPlanUpdate, TreatmentPlanInDB,
    AIPlanRequest, AssessmentChangeSummaryInDB,
    CarePlanGoalUpdate, CarePlanGoalCreate, CarePlanGoalInDB, GoalReorderRequest
)

# --- Authentication and Model Imports ---
from dependencies import get_current_active_user
from models.user import User

router = APIRouter(
    prefix="/treatment-plans",
    tags=["Treatment Plans"],
)

# =================================================================
# === AI GENERATION ENDPOINT (MODIFIED)
# =================================================================
@router.post("/generate-ai-plan", response_model=TreatmentPlanInDB, status_code=status.HTTP_201_CREATED)
async def generate_ai_plan_api(
    payload: AIPlanRequest,
    request: Request,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """
    Generates a new, structured treatment plan using AI, including a progress 
    report if applicable.
    """
    if not current_user.staff_id:
        raise HTTPException(status_code=403, detail="User is not a staff member.")

    # Call the new, consolidated controller function
    db_plan = await treatment_plan_controller.generate_and_save_ai_plan(
        db=db,
        patient_id=payload.patient_id,
        current_assessment_id=payload.current_assessment_id,
        actor_staff_id=current_user.staff_id,
        request=request
    )

    # The from_orm method now automatically handles nested goals
    return db_plan

# =================================================================
# === TREATMENT PLAN CRUD (MODIFIED)
# =================================================================

@router.post("/{plan_id}/goals", response_model=CarePlanGoalInDB, status_code=status.HTTP_201_CREATED)
def create_goal_for_plan_api(
    plan_id: int,
    goal_data: CarePlanGoalCreate,
    request: Request,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Creates a new goal and adds it to an existing treatment plan."""
    if not current_user.staff_id:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="User is not a staff member.")

    return treatment_plan_controller.create_care_plan_goal(
        db=db,
        plan_id=plan_id,
        goal_data=goal_data,
        actor_staff_id=current_user.staff_id,
        request=request
    )


@router.get("/by-patient/{patient_id}", response_model=List[TreatmentPlanInDB])
def get_treatment_plans_for_patient_api(patient_id: int, db: Session = Depends(get_db)):
    """Retrieves all treatment plans for a specific patient."""
    plans = treatment_plan_controller.get_plans_for_patient(db, patient_id)
    return plans

@router.get("/by-assessment/{assessment_id}", response_model=TreatmentPlanInDB)
def get_treatment_plan_by_assessment_api(assessment_id: int, db: Session = Depends(get_db)):
    """Retrieves the treatment plan for a specific assessment."""
    plan = treatment_plan_controller.get_plan_by_assessment(db, assessment_id)
    if not plan:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"No treatment plan found for assessment ID {assessment_id}"
        )
    return plan

@router.get("/{plan_id}", response_model=TreatmentPlanInDB)
def get_treatment_plan_details_api(plan_id: int, db: Session = Depends(get_db)):
    """Retrieves a single, complete treatment plan, including all its goals."""
    plan = treatment_plan_controller.get_plan_details(db, plan_id)
    return plan

@router.put("/{plan_id}", response_model=TreatmentPlanInDB)
def update_treatment_plan_api(
    plan_id: int,
    plan_update_data: TreatmentPlanUpdate,
    request: Request,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Updates the main text fields (summaries, notes) of a treatment plan."""
    if not current_user.staff_id:
        raise HTTPException(status_code=403, detail="User is not a staff member.")

    return treatment_plan_controller.update_treatment_plan(
        db=db, plan_id=plan_id, plan_update_data=plan_update_data,
        actor_staff_id=current_user.staff_id, request=request
    )

@router.delete("/{plan_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_treatment_plan_api(
    plan_id: int,
    request: Request, # Added for consistency
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Deletes a treatment plan and all of its associated goals."""
    if not current_user.staff_id:
        raise HTTPException(status_code=403, detail="User is not a staff member.")

    treatment_plan_controller.delete_treatment_plan(
        db=db, plan_id=plan_id, actor_staff_id=current_user.staff_id, request=request
    )
    # On success, return nothing with a 204 status code

# =================================================================
# === NEW ENDPOINT FOR EDITING INDIVIDUAL GOALS
# =================================================================

@router.put("/goals/{goal_id}", response_model=CarePlanGoalInDB)
def update_goal_api(
    goal_id: int,
    goal_update_data: CarePlanGoalUpdate, # This schema now accepts 'needs_category'
    request: Request,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Updates a single goal within a care plan, including its text and category."""
    if not current_user.staff_id:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="User is not a staff member.")

    return treatment_plan_controller.update_care_plan_goal(
        db=db, goal_id=goal_id, goal_update_data=goal_update_data,
        actor_staff_id=current_user.staff_id, request=request
    )
    
@router.delete("/goals/{goal_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_goal_api(
    goal_id: int,
    request: Request,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Deletes a single goal from a care plan."""
    if not current_user.staff_id:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="User is not a staff member.")

    treatment_plan_controller.delete_care_plan_goal(
        db=db, goal_id=goal_id, actor_staff_id=current_user.staff_id, request=request
    )
    # On success, return nothing with a 204 status code
    
# =================================================================
# === ASSESSMENT CHANGE SUMMARY ENDPOINT (UNCHANGED)
# =================================================================
@router.get("/assessment-change-summaries/{summary_id}", response_model=AssessmentChangeSummaryInDB)
def get_assessment_change_summary_api(summary_id: int, db: Session = Depends(get_db)):
    """Retrieves details of a single assessment change summary."""
    summary = treatment_plan_controller.get_assessment_change_summary(db, summary_id)
    return summary

@router.put("/{plan_id}/goals/reorder", status_code=status.HTTP_200_OK)
def reorder_goals_api(
    plan_id: int,
    reorder_data: GoalReorderRequest,
    request: Request,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Reorders the goals for a specific treatment plan."""
    if not current_user.staff_id:
        raise HTTPException(status_code=403, detail="User is not a staff member.")

    return treatment_plan_controller.reorder_care_plan_goals(
        db=db,
        plan_id=plan_id,
        reorder_data=reorder_data,
        actor_staff_id=current_user.staff_id,
        request=request
    )