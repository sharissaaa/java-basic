import React, { useState, useEffect, useCallback } from "react";
import { useParams, Link, useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import axios from "axios";
import { exportTreatmentPlanData } from "../../utilss/treatmentPlanExportUtils";
import CarePlanStatusSection from "./CarePlanStatusSection"; // Adjust path if needed

import {
  DndContext,
  closestCenter,
  PointerSensor,
  useSensor,
  useSensors,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  verticalListSortingStrategy,
  useSortable,
} from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";

// =================================================================
// 1. ICONS
// =================================================================

const DragHandleIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
    />
  </svg>
);
const ChevronLeftIcon = ({ className = "w-6 h-6" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M15.75 19.5L8.25 12l7.5-7.5"
    />
  </svg>
);
const DocumentTextIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z"
    />
  </svg>
);
const ExternalLinkIcon = ({ className = "w-4 h-4 ml-2" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-4.5 0V6.75A.75.75 0 0114.25 6h3.75m-3.75 0l4.5 4.5m-4.5-4.5L21 3"
    />
  </svg>
);
const PencilIcon = ({ className = "w-4 h-4" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14.25v4.5m-6.75-6.75h.008v.008H11.25v-.008z"
    />
  </svg>
);
const CalendarIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5"
    />
  </svg>
);
const TrashIcon = ({ className = "w-4 h-4" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.924a2.25 2.25 0 01-2.244-2.077L4.74 5.959M3.75 6.75h16.5M15.75 6.75V5.25A2.25 2.25 0 0013.5 3h-3a2.25 2.25 0 00-2.25 2.25v1.5h7.5z"
    />
  </svg>
);

const UserIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z"
    />
  </svg>
);

const ChartBarIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z"
    />
  </svg>
);

const HeartIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"
    />
  </svg>
);

const ShieldCheckIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M9 12.75L11.25 15 15 9.75m-3-7.036A11.959 11.959 0 013.598 6 11.99 11.99 0 003 9.749c0 5.592 3.824 10.29 9 11.623 5.176-1.332 9-6.03 9-11.623 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.285z"
    />
  </svg>
);

const ExclamationTriangleIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"
    />
  </svg>
);

const PlusIcon = ({ className = "w-5 h-5" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className={className}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M12 4.5v15m7.5-7.5h-15"
    />
  </svg>
);

// =================================================================
// 2. TYPE DEFINITIONS
// =================================================================

interface CarePlanGoal {
  id: number;
  treatment_plan_id: number;
  needs_category: string;
  goal: string | null;
  intervention: string | null;
  rationale: string | null;
}

interface TreatmentPlanDetail {
  id: number;
  patient_id: number;
  patient_name: string;
  patient_assessment_id: number;
  assessment_name: string;
  assessment_date: string;
  assessment_change_summary_id: number | null;
  created_at: string;
  plan_start_date: string;
  review_date: string | null;
  brief_background_summary: string | null;
  disability_and_functioning_summary: string | null;
  strengths_and_aspirations_summary: string | null;
  risks_and_concerns: string | null;
  additional_notes: string | null;
  care_plan_edit_summary: string | null;
  goals: CarePlanGoal[];
  // Include all the additional fields directly from the backend's get_plan_details response
  patient_unique_id: string;
  patient_age: number | null; // Can be null if not provided
  patient_gender: string | null; // Can be null if not provided
  patient_date_of_admission: string | null; // Can be null if not provided
  diagnosis: string | null;
  psychopathology_status: string | null;
  known_comorbidities: string | null;
  overall_whodas_score: number | null;
  overall_sofs_score: number | null;
  sofs_impaired_domains: string[]; // This is a list of strings now
  overall_qol_score: number | null;
  overall_general_health_score: number | null;
  qol_physical_health_score: number | null;
  qol_physiological_score: number | null;
  qol_social_relationships_score: number | null;
  qol_environment_score: number | null;
  scores: ScoreDetail[]; // Keep this to process detailed scores if needed
  responses: ResponseDetail[]; // Keep this to process detailed responses if needed
}

interface ResponseDetail {
  question_domain: string;
  question_text: string;
  response_value: string;
  question_code: string;
  selected_checklist_options: string[] | null;
}

interface ScoreDetail {
  domain: string;
  score: number;
  score_interpretation: string;
}

// =================================================================
// 3. SUB-COMPONENTS
// =================================================================
const SortableGoalRow = ({
  goal,
  index,
  onEditGoal,
  onDeleteGoal,
  userRole,
}) => {
  const { attributes, listeners, setNodeRef, transform, transition } =
    useSortable({ id: goal.id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  };

  return (
    <tr ref={setNodeRef} style={style}>
      {/* Drag Handle Column */}
      {userRole === "staff" && (
        <td className="px-3 py-6 whitespace-nowrap text-center">
          <button
            {...attributes}
            {...listeners}
            className="cursor-grab text-gray-400 hover:text-gray-700 dark:hover:text-gray-200"
            aria-label="Drag to reorder"
          >
            <DragHandleIcon />
          </button>
        </td>
      )}
      {/* Numbered and Prioritized Needs Column */}
      <td className="px-6 py-6 whitespace-normal">
        <div className="flex items-center gap-3">
          <span className="font-bold text-gray-700 dark:text-gray-300">
            {index + 1}.
          </span>
          <span className="text-sm font-semibold text-blue-700 dark:text-blue-300">
            {goal.needs_category}
          </span>
        </div>
      </td>
      {/* Other data columns */}
      <td className="px-6 py-6 whitespace-pre-wrap text-sm text-gray-800 dark:text-gray-200">
        {goal.goal}
      </td>
      <td className="px-6 py-6 whitespace-pre-wrap text-sm text-gray-800 dark:text-gray-200">
        {goal.intervention}
      </td>
      <td className="px-6 py-6 whitespace-pre-wrap text-sm text-gray-800 dark:text-gray-200">
        {goal.rationale}
      </td>
      {/* Actions Column */}
      {userRole === "staff" && (
        <td className="px-6 py-6 whitespace-nowrap text-right text-sm font-medium">
          <button
            onClick={() => onEditGoal(goal)}
            className="inline-flex items-center gap-1 text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 font-medium transition-colors"
          >
            <PencilIcon className="w-4 h-4" /> Edit
          </button>
          <button
            onClick={() => onDeleteGoal(goal)}
            className="ml-4 inline-flex items-center gap-1 text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300 font-medium transition-colors"
          >
            <TrashIcon className="w-4 h-4" /> Delete
          </button>
        </td>
      )}
    </tr>
  );
};

const GoalsSection = ({
  goals,
  onEditGoal,
  onDeleteGoal,
  onReorderSave,
  onAddGoal, // Prop to handle opening the add modal
  userRole,
}) => {
  const [orderedGoals, setOrderedGoals] = useState(goals);
  const [hasChanges, setHasChanges] = useState(false);

  useEffect(() => {
    setOrderedGoals(goals);
    setHasChanges(false);
  }, [goals]);

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 5,
      },
    })
  );

  const handleDragEnd = (event) => {
    const { active, over } = event;
    if (over && active.id !== over.id) {
      setOrderedGoals((items) => {
        const oldIndex = items.findIndex((item) => item.id === active.id);
        const newIndex = items.findIndex((item) => item.id === over.id);
        setHasChanges(true);
        return arrayMove(items, oldIndex, newIndex);
      });
    }
  };

  const handleSaveChanges = () => {
    onReorderSave(orderedGoals);
    setHasChanges(false);
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700">
      <div className="p-6 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 bg-purple-100 dark:bg-purple-900/30 rounded-xl flex items-center justify-center">
            <DocumentTextIcon />
          </div>
          <div>
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
              Treatment Goals
            </h2>
            <p className="text-gray-600 dark:text-gray-400 text-sm">
              Drag and drop goals to re-prioritize.
            </p>
          </div>
        </div>
        <div className="flex items-center gap-4">
          {hasChanges && userRole === "staff" && (
            <button
              onClick={handleSaveChanges}
              className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
            >
              Save New Order
            </button>
          )}
          {userRole === "staff" && (
            <button
              onClick={onAddGoal}
              className="inline-flex items-center gap-2 px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-lg hover:bg-green-700 transition-colors"
            >
              <PlusIcon className="w-4 h-4" />
              Add Goal
            </button>
          )}
        </div>
      </div>

      <div className="p-6">
        <div className="overflow-x-auto">
          <DndContext
            sensors={sensors}
            collisionDetection={closestCenter}
            onDragEnd={handleDragEnd}
          >
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead className="bg-gray-50 dark:bg-gray-700/50">
                <tr>
                  {userRole === "staff" && (
                    <th className="px-3 w-12" aria-label="Drag handle column"></th>
                  )}
                  <th className="px-6 py-4 text-left text-xs font-bold text-gray-500 dark:text-gray-300 uppercase tracking-wider">Identified Needs (Prioritized)</th>
                  <th className="px-6 py-4 text-left text-xs font-bold text-gray-500 dark:text-gray-300 uppercase tracking-wider">Goals</th>
                  <th className="px-6 py-4 text-left text-xs font-bold text-gray-500 dark:text-gray-300 uppercase tracking-wider">Intervention</th>
                  <th className="px-6 py-4 text-left text-xs font-bold text-gray-500 dark:text-gray-300 uppercase tracking-wider">Rationale</th>
                  {userRole === "staff" && (
                    <th className="px-6 py-4 text-right text-xs font-bold text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
                  )}
                </tr>
              </thead>
              <SortableContext
                items={orderedGoals.map((g) => g.id)}
                strategy={verticalListSortingStrategy}
              >
                <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                  {orderedGoals.length > 0 ? (
                    orderedGoals.map((goal, index) => (
                      <SortableGoalRow
                        key={goal.id}
                        goal={goal}
                        index={index}
                        onEditGoal={onEditGoal}
                        onDeleteGoal={onDeleteGoal}
                        userRole={userRole}
                      />
                    ))
                  ) : (
                    <tr>
                      <td colSpan={userRole === "staff" ? 6 : 4} className="px-6 py-12 text-center">
                        <div className="flex flex-col items-center">
                          <p className="text-gray-500 dark:text-gray-400 text-sm">No goals have been generated for this plan.</p>
                        </div>
                      </td>
                    </tr>
                  )}
                </tbody>
              </SortableContext>
            </table>
          </DndContext>
        </div>
      </div>
    </div>
  );
};

const GoalModal = ({ // Renamed from GoalEditModal
    goal, // Can be null for adding a new goal
    isOpen,
    onClose,
    onSave,
}: {
    goal: CarePlanGoal | null;
    isOpen: boolean;
    onClose: () => void;
    // The onSave prop now sends back a goal object that might not have an ID yet
    onSave: (goal: Omit<CarePlanGoal, 'id' | 'treatment_plan_id'>) => void;
}) => {
    const [formData, setFormData] = useState<Omit<CarePlanGoal, 'id' | 'treatment_plan_id'>>({
        needs_category: "",
        goal: "",
        intervention: "",
        rationale: "",
    });

    useEffect(() => {
        // If a goal is passed, we're in "edit" mode. Otherwise, "add" mode.
        if (goal) {
            setFormData({
                needs_category: goal.needs_category,
                goal: goal.goal || "",
                intervention: goal.intervention || "",
                rationale: goal.rationale || "",
            });
        } else {
            // Reset form for adding a new goal
            setFormData({
                needs_category: "",
                goal: "",
                intervention: "",
                rationale: "",
            });
        }
    }, [goal, isOpen]); // Rerun when isOpen changes to reset the form

    if (!isOpen) return null;

    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {
        const { name, value } = e.target;
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const handleSave = () => {
        if (formData) onSave(formData);
    };

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4">
            <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl w-full max-w-2xl border border-gray-200 dark:border-gray-700 flex flex-col max-h-[90vh]">
                <div className="p-6 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
                    <h3 className="text-xl font-bold text-gray-900 dark:text-white">
                        {/* Dynamic Title */}
                        {goal ? "Edit Goal" : "Add New Goal"}
                    </h3>
                </div>

                {/* The form fields remain the same, just ensure they use the new `formData` state */}
                <div className="p-6 space-y-6 overflow-y-auto">
                    <div>
                        <label className="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Identified Need</label>
                        <textarea name="needs_category" value={formData.needs_category} onChange={handleChange} rows={3} className="w-full p-3 border ..." placeholder="Enter the identified need category..." />
                    </div>
                    <div>
                        <label className="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Goal</label>
                        <textarea name="goal" value={formData.goal || ""} onChange={handleChange} rows={4} className="w-full p-3 border ..." placeholder="Enter the goal..." />
                    </div>
                    <div>
                        <label className="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Intervention</label>
                        <textarea name="intervention" value={formData.intervention || ""} onChange={handleChange} rows={4} className="w-full p-3 border ..." placeholder="Enter the intervention..." />
                    </div>
                    <div>
                        <label className="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Rationale</label>
                        <textarea name="rationale" value={formData.rationale || ""} onChange={handleChange} rows={4} className="w-full p-3 border ..." placeholder="Enter the rationale..." />
                    </div>
                </div>

                <div className="p-6 border-t border-gray-200 dark:border-gray-700 flex justify-end space-x-3 flex-shrink-0">
                    <button onClick={onClose} className="px-6 py-2 ...">Cancel</button>
                    <button onClick={handleSave} className="px-6 py-2 ...">Save Changes</button>
                </div>
            </div>
        </div>
    );
};

// =================================================================
// 4. MAIN COMPONENT
// =================================================================

export default function TreatmentPlanViewer(): React.JSX.Element {
  const { planId } = useParams<{ planId: string }>();
  const navigate = useNavigate();

  const [plan, setPlan] = useState<TreatmentPlanDetail | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [editingField, setEditingField] = useState<string | null>(null);
  const [tempContent, setTempContent] = useState("");
  const [editingGoal, setEditingGoal] = useState<CarePlanGoal | null>(null);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [deletingGoal, setDeletingGoal] = useState<CarePlanGoal | null>(null);
  const [isAddGoalModalOpen, setIsAddGoalModalOpen] = useState(false);
  const [editSummary, setEditSummary] = useState("");
  const [statusData, setStatusData] = useState({});
  const [isStatusModalOpen, setIsStatusModalOpen] = useState(false);
  const [selectedGoalId, setSelectedGoalId] = useState<number | null>(null);

  const userRole = localStorage.getItem("user_role");

  const fetchAllDetails = useCallback(async () => {
    if (!planId) {
      setError("Treatment Plan ID is missing.");
      setIsLoading(false);
      return;
    }
    setIsLoading(true);
    try {
      const token = localStorage.getItem("token");
      const headers = { Authorization: `Bearer ${token}` };

      const planResponse = await axios.get<TreatmentPlanDetail>(
        `${import.meta.env.VITE_API_URL}/treatment-plans/${planId}`,
        { headers }
      );
      setPlan(planResponse.data);
      setEditSummary(planResponse.data.care_plan_edit_summary || "");
      const statusRes = await axios.get(`/treatment-plans/${planId}/status`, { headers });
      setStatusData(statusRes.data);

    } catch (err: any) {
      setError(err.response?.data?.detail || "Failed to fetch details.");
    } finally {
      setIsLoading(false);
    }
  }, [planId]);

  useEffect(() => {
    fetchAllDetails();
  }, [fetchAllDetails]);

  const handleEditClick = (
    fieldName: string,
    currentContent: string | null
  ) => {
    setEditingField(fieldName);
    if (fieldName === "review_date" && currentContent) {
      setTempContent(new Date(currentContent).toISOString().split("T")[0]);
    } else {
      setTempContent(currentContent || "");
    }
  };

  const handleCancelEdit = () => {
    setEditingField(null);
    setTempContent("");
  };

  const handleSave = async () => {
    if (!plan || !editingField) return;

    toast.info("Saving changes...");
    try {
      const token = localStorage.getItem("token");
      const headers = { Authorization: `Bearer ${token}` };
      await axios.put(
        `${import.meta.env.VITE_API_URL}/treatment-plans/${plan.id}`,
        { [editingField]: tempContent },
        { headers }
      );

      await fetchAllDetails();
      toast.success("Plan updated successfully!");
    } catch (err: any) {
      toast.error(err.response?.data?.detail || "Failed to update plan.");
    } finally {
      setEditingField(null);
      setTempContent("");
    }
  };

  const handleSaveGoal = async (updatedGoal: CarePlanGoal) => {
    toast.info("Saving goal...");
    try {
      const token = localStorage.getItem("token");
      const headers = { Authorization: `Bearer ${token}` };
      await axios.put(
        `${import.meta.env.VITE_API_URL}/treatment-plans/goals/${
          updatedGoal.id
        }`,
        updatedGoal,
        { headers }
      );

      setPlan((prev) =>
        prev
          ? {
              ...prev,
              goals: prev.goals.map((g) =>
                g.id === updatedGoal.id ? updatedGoal : g
              ),
            }
          : null
      );
      setEditingGoal(null);
      toast.success("Goal updated successfully!");
    } catch (err: any) {
      toast.error(err.response?.data?.detail || "Failed to update goal.");
    }
  };
  
  const handleSaveNewGoal = async (newGoalData: Omit<CarePlanGoal, 'id' | 'treatment_plan_id'>) => {
    if (!plan) return;
    toast.info("Adding new goal...");
    try {
        const token = localStorage.getItem("token");
        const headers = { Authorization: `Bearer ${token}` };
        const response = await axios.post<CarePlanGoal>(
            `${import.meta.env.VITE_API_URL}/treatment-plans/${plan.id}/goals`,
            newGoalData,
            { headers }
        );

        const newlyAddedGoal = response.data;

        setPlan(prev => prev ? { ...prev, goals: [...prev.goals, newlyAddedGoal] } : null);
        
        setIsAddGoalModalOpen(false);
        toast.success("Goal added successfully!");
    } catch (err: any) {
        toast.error(err.response?.data?.detail || "Failed to add goal.");
    }
  };

  const handleSaveEditSummary = async () => {
    if (!plan) return;
    toast.info("Saving edit summary...");
    try {
      const token = localStorage.getItem("token");
      const headers = { Authorization: `Bearer ${token}` };
      await axios.put(
        `${import.meta.env.VITE_API_URL}/treatment-plans/${plan.id}`,
        { care_plan_edit_summary: editSummary },
        { headers }
      );
      toast.success("Edit summary saved!");
      setPlan(prev => prev ? { ...prev, care_plan_edit_summary: editSummary } : null);
    } catch (err: any) {
        toast.error(err.response?.data?.detail || "Failed to save summary.");
    }
  };


const handleExport = () => {
  if (!plan) return;
  exportTreatmentPlanData(plan, { format: "pdf" }); // or "excel" for Excel format
};

  const handleDeletePlan = async () => {
    setIsDeleteModalOpen(false);
    if (!plan) return;

    toast.info("Deleting care plan...");
    try {
      const token = localStorage.getItem("token");
      const headers = { Authorization: `Bearer ${token}` };
      await axios.delete(
        `${import.meta.env.VITE_API_URL}/treatment-plans/${plan.id}`,
        { headers }
      );

      toast.success("Care plan deleted successfully.");

      const patientProfileBasePath =
        userRole === "admin"
          ? "/admin/patients/view"
          : userRole === "institution"
          ? "/institution/patients/view"
          : "/staff/patients/view";

      let backPath = `${patientProfileBasePath}/${plan?.patient_id}`;

      if (!plan?.patient_id) {
        if (userRole === "admin") {
          backPath = `/admin/patients/all-patients`;
        } else if (userRole === "institution") {
          backPath = `/institution/patients/all-patients`;
        } else {
          backPath = `/staff/patients/all-patients`;
        }
        toast.warn(
          "Could not determine patient profile; navigating to all patients list."
        );
      }

      navigate(backPath);
    } catch (err: any) {
      toast.error(err.response?.data?.detail || "Failed to delete care plan.");
    }
  };

  const handleConfirmDeleteGoal = async () => {
    if (!deletingGoal) return;

    toast.info("Deleting goal...");
    try {
      const token = localStorage.getItem("token");
      const headers = { Authorization: `Bearer ${token}` };
      await axios.delete(
        `${import.meta.env.VITE_API_URL}/treatment-plans/goals/${
          deletingGoal.id
        }`,
        { headers }
      );

      setPlan((prevPlan) => {
        if (!prevPlan) return null;
        return {
          ...prevPlan,
          goals: prevPlan.goals.filter((g) => g.id !== deletingGoal.id),
        };
      });

      toast.success("Goal deleted successfully!");
    } catch (err: any) {
      toast.error(err.response?.data?.detail || "Failed to delete goal.");
    } finally {
      setDeletingGoal(null);
    }
  };
  
  const handleReorderSave = async (reorderedGoals: CarePlanGoal[]) => {
    if (!plan) return;
    
    const orderedIds = reorderedGoals.map(g => g.id);

    toast.info("Saving new goal order...");
    try {
        const token = localStorage.getItem("token");
        await axios.put(
            `${import.meta.env.VITE_API_URL}/treatment-plans/${plan.id}/goals/reorder`,
            { goal_ids: orderedIds },
            { headers: { Authorization: `Bearer ${token}` } }
        );
        
        setPlan(prevPlan => prevPlan ? ({
            ...prevPlan,
            goals: reorderedGoals,
        }) : null);
        
        toast.success("Goal order updated successfully!");
    } catch (err: any) {
        toast.error(err.response?.data?.detail || "Failed to save new order.");
        fetchAllDetails();
    }
  };

  const formatDate = (dateString: string | null) => {
    if (!dateString) return "N/A";
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
      return "Invalid Date";
    }
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const renderContent = (
    content: string | number | null | undefined
  ): string | React.JSX.Element => {
    if (content === null || content === undefined) {
      return <span className="italic text-gray-400">Not provided.</span>;
    }

    const stringContent = String(content).trim();

    if (stringContent === "") {
      return <span className="italic text-gray-400">Not provided.</span>;
    }

    return stringContent;
  };

  const renderSofsImpairedDomains = (responses: ResponseDetail[]) => {
    if (!responses || !Array.isArray(responses) || responses.length === 0) {
      return (
        <ul className="list-disc list-inside space-y-2 text-sm text-gray-800 dark:text-gray-200">
          <li className="italic text-gray-400">
            No significant impairments identified in SOFS.
          </li>
        </ul>
      );
    }
  
    const impairedDomains: { [key: string]: string[] } = {};
  
    responses.forEach((res) => {
      if (
        res.question_code.startsWith("SOFS_") &&
        res.response_value &&
        res.response_value !== "1"
      ) {
        const impairmentLevel = (() => {
          switch (res.response_value) {
            case "2":
              return "Mild impairment";
            case "3":
              return "Moderate impairment";
            case "4":
              return "Severe impairment";
            case "5":
              return "Extreme impairment";
            default:
              return "Other impairment";
          }
        })();
  
        if (!impairedDomains[impairmentLevel]) {
          impairedDomains[impairmentLevel] = [];
        }
  
        let domainName = res.question_text;
        let itemContent = "";
  
        if (res.question_text.includes(":")) {
          const parts = res.question_text.split(":", 2);
          domainName = parts[0].trim();
          itemContent = parts[1].trim();
        } else {
          itemContent = domainName;
        }
  
        if (domainName.endsWith(".")) {
          domainName = domainName.slice(0, -1);
        }
  
        if (
          res.selected_checklist_options &&
          res.selected_checklist_options.length > 0
        ) {
          itemContent += `: ${res.selected_checklist_options.join(", ")}`;
        }
  
        impairedDomains[impairmentLevel].push(
          `<strong>${domainName}:</strong> ${itemContent}`
        );
      }
    });
  
    const sortedLevels = [
      "Extreme impairment",
      "Severe impairment",
      "Moderate impairment",
      "Mild impairment",
      "Other impairment",
    ];
  
    const hasImpairments = Object.keys(impairedDomains).length > 0;
  
    return (
      <ul className="list-disc list-inside space-y-2 text-sm text-gray-800 dark:text-gray-200">
        {hasImpairments ? (
          sortedLevels.map((level) => {
            const items = impairedDomains[level];
            if (items && items.length > 0) {
              return (
                <li
                  key={level}
                  className="font-semibold text-blue-700 dark:text-blue-300"
                >
                  {level}:
                  <ul className="list-circle list-inside ml-4 text-gray-700 dark:text-gray-300 font-normal">
                    {items.map((item, idx) => (
                      <li key={idx} dangerouslySetInnerHTML={{ __html: item }} />
                    ))}
                  </ul>
                </li>
              );
            }
            return null;
          })
        ) : (
          <li className="italic text-gray-400">
            No significant impairments identified in SOFS.
          </li>
        )}
      </ul>
    );
  };

  if (isLoading)
    return (
      <div className="p-8 text-center text-lg text-gray-600 dark:text-gray-300">
        Loading Care Plan...
      </div>
    );
  if (error)
    return (
      <div className="p-8 text-center text-red-600 dark:text-red-400 text-lg">
        Error: {error}
      </div>
    );
  if (!plan)
    return (
      <div className="p-8 text-center text-gray-600 dark:text-gray-300 text-lg">
        No treatment plan found.
      </div>
    );

  const assessmentResponseBasePath =
    userRole === "admin"
      ? "/admin/patients/assessment-response"
      : userRole === "institution"
      ? "/institution/patients/assessment-response"
      : "/staff/patients/assessment-response";

  const backToAssessmentLink = `${assessmentResponseBasePath}/${plan.patient_assessment_id}`;

  const progressReportBasePath =
    userRole === "admin"
      ? "/admin/patients/progress-report"
      : userRole === "institution"
      ? "/institution/patients/progress-report"
      : "/staff/patients/progress-report";

  const progressReportLink = plan.assessment_change_summary_id
    ? `${progressReportBasePath}/${plan.assessment_change_summary_id}`
    : null;

  const profileData = [
    {
      title: "Brief Background Summary",
      content: plan.brief_background_summary,
      fieldName: "brief_background_summary",
    },
    {
      title: "Disability and Functioning Summary",
      content: plan.disability_and_functioning_summary,
      fieldName: "disability_and_functioning_summary",
    },
    {
      title: "Strengths and Aspirations",
      content: plan.strengths_and_aspirations_summary,
      fieldName: "strengths_and_aspirations_summary",
    },
    {
      title: "Risks and Concerns",
      content: plan.risks_and_concerns,
      fieldName: "risks_and_concerns",
    },
    {
      title: "Additional Staff Notes",
      content: plan.additional_notes,
      fieldName: "additional_notes",
    },
  ];

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="p-4 sm:p-6 md:p-8">
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <div className="flex justify-between items-center mb-6">
              <Link
                to={backToAssessmentLink}
                className="inline-flex items-center text-sm font-medium text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 group transition-colors"
              >
                <ChevronLeftIcon className="h-4 w-4 mr-2 group-hover:translate-x-[-2px] transition-transform" />{" "}
                Back to Assessment
              </Link>
               <div className="flex items-center gap-4">
    <button
      onClick={handleExport}
      className="inline-flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-lg hover:bg-indigo-700 transition-colors"
    >
      <svg className="w-4 h-4" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
      </svg>
      Export Plan
    </button>
              {userRole === "staff" && (
                <button
                  onClick={() => setIsDeleteModalOpen(true)}
                  className="inline-flex items-center gap-2 px-4 py-2 bg-red-100 text-red-700 dark:bg-red-900/40 dark:text-red-300 text-sm font-medium rounded-lg hover:bg-red-200 dark:hover:bg-red-900/60 transition-colors"
                >
                  <TrashIcon className="w-4 h-4" /> Delete Plan
                </button>
              )}
            </div>
</div>
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6">
              <h1 className="text-4xl font-extrabold text-gray-900 dark:text-white mb-2">
                Care Plan
              </h1>
              <p className="mt-1 text-xl font-medium text-gray-700 dark:text-gray-300">
                For: <span className="font-bold">{plan.patient_name}</span>
              </p>
              <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700 flex flex-wrap gap-x-8 gap-y-3 text-base">
                <span className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
                  <CalendarIcon className="w-5 h-5" />
                  Generated:{" "}
                  <strong className="text-gray-800 dark:text-gray-200">
                    {formatDate(plan.created_at)}
                  </strong>
                </span>
                <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
                  <CalendarIcon className="w-5 h-5" />
                  <span>Review Date:</span>
                  {editingField === "review_date" ? (
                    <div className="flex items-center gap-2">
                      <input
                        type="date"
                        value={tempContent}
                        onChange={(e) => setTempContent(e.target.value)}
                        className="p-1 border border-gray-300 rounded-md dark:bg-gray-700 dark:text-gray-200 text-sm focus:ring-blue-500 focus:border-blue-500"
                      />
                      <button
                        onClick={handleSave}
                        className="px-3 py-1 bg-blue-600 text-white text-xs rounded-md hover:bg-blue-700 transition-colors"
                      >
                        Save
                      </button>
                      <button
                        onClick={handleCancelEdit}
                        className="px-3 py-1 bg-gray-200 text-gray-800 text-xs rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500 transition-colors"
                      >
                        Cancel
                      </button>
                    </div>
                  ) : (
                    <strong className="text-gray-800 dark:text-gray-200 flex items-center gap-1">
                      {formatDate(plan.review_date)}
                      {userRole === "staff" && (
                        <button
                          onClick={() =>
                            handleEditClick("review_date", plan.review_date)
                          }
                          className="ml-1 text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 transition-colors"
                        >
                          <PencilIcon className="w-3 h-3" />
                        </button>
                      )}
                    </strong>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Resident Demographic and Assessment Overview */}
          {plan && (
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 mb-8">
              <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">
                Resident and Assessment Overview
              </h2>
              <div className="overflow-x-auto">
                <table className="min-w-full border-collapse">
                  <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Unique ID
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.patient_unique_id)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Name
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.patient_name)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Age
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.patient_age)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Gender
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.patient_gender)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Date of Admission
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {formatDate(plan.patient_date_of_admission)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Date of Assessment
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {formatDate(plan.assessment_date)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Current/Provisional Diagnosis
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.diagnosis)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Psychopathology Status
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.psychopathology_status)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Known Comorbidities
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.known_comorbidities)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        WHODAS 2.0 Overall Score
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.overall_whodas_score)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 align-top text-sm font-bold text-gray-600 dark:text-gray-300">
                        WHODAS 2.0 Domain Scores
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {plan.scores &&
                        plan.scores.filter((s) =>
                          s.domain.startsWith("WHODAS Domain")
                        ).length > 0 ? (
                          <ul className="list-disc list-inside">
                            {plan.scores
                              .filter((s) =>
                                s.domain.startsWith("WHODAS Domain")
                              )
                              .map((score, idx) => {
                                return (
                                  <li key={idx}>
                                    {score.domain.replace("WHODAS ", "")}:{" "}
                                    <span className="font-semibold">
                                      {renderContent(score.score)}
                                    </span>
                                  </li>
                                );
                              })}
                          </ul>
                        ) : (
                          <span className="italic text-gray-400">N/A</span>
                        )}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        SOFS Overall Score
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.overall_sofs_score)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 align-top text-sm font-bold text-gray-600 dark:text-gray-300">
                        SOFS Impaired Domains
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderSofsImpairedDomains(plan.responses)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Quality of Life Overall QoL
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.overall_qol_score)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 text-sm font-bold text-gray-600 dark:text-gray-300">
                        Quality of Life Overall General Health
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {renderContent(plan.overall_general_health_score)}
                      </td>
                    </tr>
                    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                      <td className="px-6 py-3 w-1/3 align-top text-sm font-bold text-gray-600 dark:text-gray-300">
                        Quality of Life Sub-scores
                      </td>
                      <td className="px-6 py-3 text-sm text-gray-800 dark:text-gray-200">
                        {plan.qol_physical_health_score !== null ||
                        plan.qol_physiological_score !== null ||
                        plan.qol_social_relationships_score !== null ||
                        plan.qol_environment_score !== null ? (
                          <ul className="list-disc list-inside">
                            <li>
                              Physical Health:{" "}
                              {renderContent(plan.qol_physical_health_score)}
                            </li>
                            <li>
                              Physiological:{" "}
                              {renderContent(plan.qol_physiological_score)}
                            </li>
                            <li>
                              Social Relationships:{" "}
                              {renderContent(
                                plan.qol_social_relationships_score
                              )}
                            </li>
                            <li>
                              Environment:{" "}
                              {renderContent(plan.qol_environment_score)}
                            </li>
                          </ul>
                        ) : (
                          <span className="italic text-gray-400">N/A</span>
                        )}
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {/* Basic Resident Profile Table */}
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">
              Basic Resident Profile
            </h2>
            <div className="overflow-x-auto">
              <table className="min-w-full border-collapse">
                <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                  {profileData.map(({ title, content, fieldName }) => (
                    <tr
                      key={fieldName}
                      className="hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors"
                    >
                      <td className="px-6 py-4 w-1/3 align-top text-sm font-bold text-gray-600 dark:text-gray-300">
                        {title}
                      </td>
                      <td className="px-6 py-4 align-top">
                        {editingField === fieldName ? (
                          <div>
                            <textarea
                              value={tempContent}
                              onChange={(e) => setTempContent(e.target.value)}
                              className="w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:text-gray-200 focus:ring-blue-500 focus:border-blue-500"
                              rows={5}
                            />
                            <div className="flex gap-2 mt-2">
                              <button
                                onClick={handleSave}
                                className="px-3 py-1 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 transition-colors"
                              >
                                Save
                              </button>
                              <button
                                onClick={handleCancelEdit}
                                className="px-3 py-1 bg-gray-200 text-gray-800 text-sm rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-white transition-colors"
                              >
                                Cancel
                              </button>
                            </div>
                          </div>
                        ) : (
                          <div className="flex justify-between items-start">
                            {content ? (
                              <ul className="list-disc list-inside text-sm text-gray-800 dark:text-gray-200 space-y-1">
                                {content.split("\n").map((line, idx) => (
                                  <li key={idx}>{line.trim()}</li>
                                ))}
                              </ul>
                            ) : (
                              <p className="text-sm italic text-gray-400">
                                Not provided.
                              </p>
                            )}
                            {userRole === "staff" && (
                              <button
                                onClick={() =>
                                  handleEditClick(fieldName, content)
                                }
                                className="ml-4 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-sm flex-shrink-0 transition-colors"
                              >
                                Edit
                              </button>
                            )}
                          </div>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Goals Table */}
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 mb-8">
            <GoalsSection
              goals={plan.goals}
              onEditGoal={(goal) => setEditingGoal(goal)}
              onDeleteGoal={(goal) => setDeletingGoal(goal)}
              onReorderSave={handleReorderSave}
              onAddGoal={() => setIsAddGoalModalOpen(true)}
              userRole={userRole}
            />
            <CarePlanStatusSection
              goals={plan.goals}
              statusData={statusData}
              onEditStatus={(goalId) => {
                setSelectedGoalId(goalId);
                setIsStatusModalOpen(true);
              }}
            />
          </div>

          {/* Care Plan Edit Summary Section */}
          {userRole === 'staff' && (
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 mb-8">
              <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
                Care Plan Edit Summary
              </h2>
              <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                Note any manual changes, discussions, or reasons for editing this care plan. This summary is for internal records.
              </p>
              <textarea
                  value={editSummary}
                  onChange={(e) => setEditSummary(e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg dark:bg-gray-700 dark:text-gray-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-y"
                  rows={6}
                  placeholder="e.g., 'Increased goal priority for social skills based on discussion with Dr. Smith. Resident agreed to the new focus.'"
              />
              <div className="mt-4 flex justify-end">
                <button
                  onClick={handleSaveEditSummary}
                  className="px-6 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Save Summary
                </button>
              </div>
            </div>
          )}

          {/* Links */}
          {progressReportLink && (
            <div className="mt-8">
              <Link
                to={progressReportLink}
                className="inline-flex items-center px-4 py-2 border border-blue-200 rounded-lg text-sm font-medium text-blue-700 bg-blue-100 hover:bg-blue-200 dark:bg-blue-900/50 dark:text-blue-200 dark:border-blue-700 hover:dark:bg-blue-900/70 transition-colors"
              >
                View Associated Progress Report <ExternalLinkIcon />
              </Link>
            </div>
          )}
        </div>
      </div>

      {/* MODAL: Delete Confirmation */}
      {isDeleteModalOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4">
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-6 w-full max-w-md border border-gray-200 dark:border-gray-700">
            <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-3">
              Confirm Deletion
            </h3>
            <p className="mt-2 text-sm text-gray-600 dark:text-gray-300">
              Are you sure you want to delete this care plan? This will also
              delete any associated progress reports. This action cannot be
              undone.
            </p>
            <div className="mt-6 flex justify-end gap-3">
              <button
                onClick={() => setIsDeleteModalOpen(false)}
                className="px-4 py-2 text-sm font-medium rounded-lg bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleDeletePlan}
                className="px-4 py-2 text-sm font-medium rounded-lg bg-red-600 text-white hover:bg-red-700 transition-colors"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}

      {/* MODAL: Goal Deletion Confirmation */}
      {deletingGoal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4">
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-6 w-full max-w-md border border-gray-200 dark:border-gray-700">
            <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-3">
              Confirm Goal Deletion
            </h3>
            <p className="mt-2 text-sm text-gray-600 dark:text-gray-300">
              Are you sure you want to delete this goal? This action cannot be
              undone.
              <strong className="block mt-2 text-gray-800 dark:text-gray-100 italic">
                "{deletingGoal.needs_category}"
              </strong>
            </p>
            <div className="mt-6 flex justify-end gap-3">
              <button
                onClick={() => setDeletingGoal(null)}
                className="px-4 py-2 text-sm font-medium rounded-lg bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleConfirmDeleteGoal}
                className="px-4 py-2 text-sm font-medium rounded-lg bg-red-600 text-white hover:bg-red-700 transition-colors"
              >
                Delete Goal
              </button>
            </div>
          </div>
        </div>
      )}

      {/* MODAL: Goal Edit / Add */}
      <GoalModal
        isOpen={!!editingGoal || isAddGoalModalOpen}
        goal={editingGoal}
        onClose={() => {
          setEditingGoal(null);
          setIsAddGoalModalOpen(false);
        }}
        onSave={(goalData) => {
            if (editingGoal) {
                handleSaveGoal({ ...editingGoal, ...goalData });
            } else {
                handleSaveNewGoal(goalData);
            }
        }}
      />
    </div>
  );
}